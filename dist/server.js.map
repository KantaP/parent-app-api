{"version":3,"sources":["../src/server.js"],"names":["graphqlHTTP","require","maskErrors","jwt","session","flash","crypto","admin","serviceAccount","initializeApp","credential","cert","databaseURL","BearerStrategy","Strategy","use","token","cb","console","log","user","verify","PARENT_APP_TOKEN","err","message","GRAPHQL_PORT","graphQLServer","secret","resave","saveUninitialized","cookie","secure","initialize","corsOptions","origin","callback","credentials","allowCrossDomain","req","res","next","header","authenticate","startTime","Date","now","request","schema","graphiql","context","extensions","document","variables","operationName","result","runTime","endpointURL","json","urlencoded","extended","post","status","send","body","to","split","text","options","url","headers","error","response","statusCode","data","failureFlash","sign","id","parent_id","auth","mutate","query","expiresIn","find","where","email","parent","get","listen"],"mappings":";;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AARA,IAAMA,cAAcC,QAAQ,iBAAR,CAApB;;eASuBA,QAAQ,gBAAR,C;IAAfC,U,YAAAA,U;;AACR,IAAMC,MAAMF,QAAQ,cAAR,CAAZ;AACA,IAAMG,UAAUH,QAAQ,iBAAR,CAAhB;AACA,IAAMI,QAAQJ,QAAQ,eAAR,CAAd;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;;AAEA;AACAA,QAAQ,WAAR;;AAEA,IAAMM,QAAQN,QAAQ,gBAAR,CAAd;AACA,IAAMO,iBAAiBP,QAAQ,mEAAR,CAAvB;AACAM,MAAME,aAAN,CAAoB;AAChBC,gBAAYH,MAAMG,UAAN,CAAiBC,IAAjB,CAAsBH,cAAtB,CADI;AAEhBI,iBAAa;AAFG,CAApB;;AAMA,IAAIC,iBAAiBZ,QAAQ,sBAAR,EAAgCa,QAArD;AACA,mBAASC,GAAT,CAAa,IAAIF,cAAJ,CACT,UAASG,KAAT,EAAgBC,EAAhB,EAAoB;AAChB,QAAI;AACA,YAAID,SAAS,IAAb,EAAmB;AACf,mBAAOC,GAAG,IAAH,EAAS,IAAT,CAAP;AACH;AACDC,gBAAQC,GAAR,CAAYH,KAAZ;AACA,YAAII,OAAOjB,IAAIkB,MAAJ,CAAWL,KAAX,EAAkB,iBAAOM,gBAAzB,CAAX;AACAJ,gBAAQC,GAAR,CAAYC,IAAZ;AACA,YAAIA,QAAQA,QAAQ,IAApB,EAA0B;AACtB,mBAAOH,GAAG,IAAH,EAASG,IAAT,CAAP;AACH,SAFD,MAEO;AACH,mBAAOH,GAAG,IAAH,EAAS,IAAT,CAAP;AACH;AACJ,KAZD,CAYE,OAAOM,GAAP,EAAY;AACV,eAAON,GAAGM,IAAIC,OAAP,CAAP;AACH;AACJ,CAjBQ,CAAb;AAkBA,IAAMC,eAAe,IAArB;;AAEA,IAAMC,gBAAgB,wBAAtB;AACAA,cAAcX,GAAd,CAAkBX,QAAQ;AACtBuB,YAAQ,cADc;AAEtBC,YAAQ,KAFc;AAGtBC,uBAAmB,IAHG;AAItBC,YAAQ,EAAEC,QAAQ,IAAV;AAJc,CAAR,CAAlB;AAMAL,cAAcX,GAAd,CAAkBV,OAAlB;AACAqB,cAAcX,GAAd,CAAkB,mBAASiB,UAAT,EAAlB;AACAN,cAAcX,GAAd,CAAkB,mBAASX,OAAT,EAAlB;;AAGA,IAAM6B,cAAc;AAChBC,UADgB,kBACTA,OADS,EACDC,QADC,EACS;AACrBA,iBAAS,IAAT,EAAe,IAAf;AACH,KAHe;;AAIhBC,iBAAa;AAJG,CAApB;AAMAV,cAAcX,GAAd,CAAkB,oBAAKkB,WAAL,CAAlB;AACA,IAAII,mBAAmB,SAAnBA,gBAAmB,CAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC5CD,QAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,6BAA3C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,cAA3C;AACAD;AACH,CALD;AAMAd,cAAcX,GAAd,CAAkBsB,gBAAlB;;AAEAnC;AACAwB,cAAcX,GAAd,CAAkB,UAAlB,EAA8B,mBAAS2B,YAAT,CAAsB,QAAtB,EAAgC,EAAEtC,SAAS,KAAX,EAAhC,CAA9B,EAAmFJ,YAAY,mBAAW;AACtG,QAAM2C,YAAYC,KAAKC,GAAL,EAAlB;AADsG,QAEhGzB,IAFgG,GAEvF0B,OAFuF,CAEhG1B,IAFgG;;AAGtG,WAAO;AACH2B,gCADG;AAEHC,kBAAU,IAFP;AAGHC,iBAAS,EAAE7B,UAAF,EAHN;AAIH8B,kBAJG,4BAIwD;AAAA,gBAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,gBAApCC,SAAoC,QAApCA,SAAoC;AAAA,gBAAzBC,aAAyB,QAAzBA,aAAyB;AAAA,gBAAVC,MAAU,QAAVA,MAAU;;AACvD,mBAAO,EAAEC,SAASX,KAAKC,GAAL,KAAaF,SAAxB,EAAP;AACH;AANE,KAAP;AAQH,CAXkF,CAAnF;;AAaAjB,cAAcX,GAAd,CAAkB,WAAlB,EAA+B,0CAAgB,EAAEyC,aAAa,UAAf,EAAhB,CAA/B;;AAEA9B,cAAcX,GAAd,CAAkB,qBAAW0C,IAAX,EAAlB,E,CAAsC;AACtC/B,cAAcX,GAAd,CAAkB,qBAAW2C,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAlB;;AAEAjC,cAAckC,IAAd,CAAmB,UAAnB,EAA+B,mBAASlB,YAAT,CAAsB,QAAtB,EAAgC,EAAEtC,SAAS,KAAX,EAAhC,CAA/B,EAAoF,UAACkC,GAAD,EAAMC,GAAN,EAAc;AAC9F,QAAID,IAAIlB,IAAJ,IAAY,IAAhB,EAAsB;AAClBmB,YAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEtC,SAAS,aAAX,EAArB;AACH,KAFD,MAEO;AACH,YAAIuC,OAAO;AACPC,gBAAI1B,IAAIyB,IAAJ,CAASC,EAAT,CAAYC,KAAZ,CAAkB,GAAlB,CADG;AAEPC,kBAAM5B,IAAIyB,IAAJ,CAASG;AAFR,SAAX;AAIA,YAAIC,UAAU;AACVC,iBAAK,yCADK;AAEVC,qBAAS;AACL,iCAAiB,yEADZ;AAEL,6BAAa,GAFR;AAGL,gCAAgB,kBAHX;AAIL,0BAAU;AAJL,aAFC;AAQVN,kBAAMA,IARI;AASVN,kBAAM;AATI,SAAd;AAWA,0BAAQG,IAAR,CAAaO,OAAb,EAAsB,UAACG,KAAD,EAAQC,QAAR,EAAkBR,IAAlB,EAA2B;AAC7C,gBAAI,CAACO,KAAD,IAAUC,SAASC,UAAT,IAAuB,GAArC,EAA0C;AACtCjC,oBAAIuB,IAAJ,CAASC,KAAKU,IAAd;AACH,aAFD,MAEO;AACHlC,oBAAIuB,IAAJ,CAASQ,KAAT;AACH;AACJ,SAND;AAOH;AAEJ,CA5BD;;AA8BA5C,cAAckC,IAAd,CAAmB,QAAnB,EAA6B,mBAASlB,YAAT,CAAsB,OAAtB,EAA+B,EAAEtC,SAAS,KAAX,EAAkBsE,cAAc,IAAhC,EAA/B,CAA7B,EAAqG,UAACpC,GAAD,EAAMC,GAAN,EAAc;AAC/G,QAAIvB,QAAQb,IAAIwE,IAAJ,CAAS,EAAEC,IAAItC,IAAIlB,IAAJ,CAASyD,SAAf,EAA0BC,MAAM,IAAhC,EAAsCC,QAAQ,CAAC,KAAD,CAA9C,EAAuDC,OAAO,CAAC,KAAD,CAA9D,EAAT,EAAkF,iBAAO1D,gBAAzF,EAA2G,EAAE2D,WAAW,IAAb,EAA3G,CAAZ;AACA1C,QAAIuB,IAAJ,CAAS;AACL9C,eAAOA,KADF;AAELI,cAAMkB,IAAIlB;AAFL,KAAT;AAIH,CAND;;AAQAM,cAAckC,IAAd,CAAmB,qBAAnB;AAAA,2EAA0C,iBAAMtB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACnB,kBAAO2C,IAAP,CAAY;AAC3BC,mCAAO;AACHC,uCAAO9C,IAAIyB,IAAJ,CAASqB;AADb;AADoB,yBAAZ,CADmB;;AAAA;AAClCC,8BADkC;;AAMtC,4BAAIA,UAAU,IAAd,EAAoB;AACZrE,iCADY,GACJb,IAAIwE,IAAJ,CAAS,EAAEC,IAAIS,OAAOC,GAAP,GAAaT,SAAnB,EAA8BC,MAAM,KAApC,EAA2CC,QAAQ,CAAC,iBAAD,CAAnD,EAAwEC,OAAO,CAAC,eAAD,CAA/E,EAAT,EAA6G,iBAAO1D,gBAApH,EAAsI,EAAE2D,WAAW,IAAb,EAAtI,CADI;;AAEhB1C,gCAAIuB,IAAJ,CAAS;AACL9C,uCAAOA;AADF,6BAAT;AAGH,yBALD,MAKO;AACHuB,gCAAIuB,IAAJ,CAAS;AACL9C,uCAAO;AADF,6BAAT;AAGH;;AAfqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1C;;AAAA;AAAA;AAAA;AAAA;;AAkBAU,cAAc4D,GAAd,CAAkB,WAAlB,EAA+B,YAAM;AACjC;;AAEH,CAHD;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5D,cAAc6D,MAAd,CAAqB9D,YAArB,EAAmC;AAAA,WAAMP,QAAQC,GAAR,kDACUM,YADV,eAAN;AAAA,CAAnC","file":"server.js","sourcesContent":["import express from 'express';\nconst graphqlHTTP = require('express-graphql');\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport bodyParser from 'body-parser';\nimport schema from './data/schema';\nimport cors from 'cors';\nimport request from 'request';\nimport passport from 'passport';\nimport config from './config';\nimport { Parent } from './data/connector';\nconst { maskErrors } = require('graphql-errors');\nconst jwt = require('jsonwebtoken');\nconst session = require('express-session');\nconst flash = require('connect-flash');\nconst crypto = require('crypto');\n\n// const privateJWT = crypto.createHash('md5').update(config.PARENT_APP_TOKEN).digest('hex')\nrequire('./auth.js');\n\nconst admin = require(\"firebase-admin\");\nconst serviceAccount = require(\"./driverapp-1470129684507-firebase-adminsdk-qd3ut-0b2e7204c7.json\");\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: \"https://driverapp-1470129684507.firebaseio.com/\"\n});\n\n\nvar BearerStrategy = require('passport-http-bearer').Strategy;\npassport.use(new BearerStrategy(\n    function(token, cb) {\n        try {\n            if (token == null) {\n                return cb(null, null)\n            }\n            console.log(token)\n            let user = jwt.verify(token, config.PARENT_APP_TOKEN);\n            console.log(user)\n            if (user && user != null) {\n                return cb(null, user)\n            } else {\n                return cb(null, null)\n            }\n        } catch (err) {\n            return cb(err.message)\n        }\n    }));\nconst GRAPHQL_PORT = 3000;\n\nconst graphQLServer = express();\ngraphQLServer.use(session({\n    secret: 'keyboard cat',\n    resave: false,\n    saveUninitialized: true,\n    cookie: { secure: true }\n}))\ngraphQLServer.use(flash())\ngraphQLServer.use(passport.initialize());\ngraphQLServer.use(passport.session());\n\n\nconst corsOptions = {\n    origin(origin, callback) {\n        callback(null, true);\n    },\n    credentials: true\n};\ngraphQLServer.use(cors(corsOptions));\nvar allowCrossDomain = function(req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Content-Type');\n    next();\n}\ngraphQLServer.use(allowCrossDomain)\n\nmaskErrors(schema);\ngraphQLServer.use('/graphql', passport.authenticate('bearer', { session: false }), graphqlHTTP(request => {\n    const startTime = Date.now();\n    var { user } = request\n    return {\n        schema: schema,\n        graphiql: true,\n        context: { user },\n        extensions({ document, variables, operationName, result }) {\n            return { runTime: Date.now() - startTime };\n        }\n    };\n}));\n\ngraphQLServer.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));\n\ngraphQLServer.use(bodyParser.json()); // support json encoded bodies\ngraphQLServer.use(bodyParser.urlencoded({ extended: false }));\n\ngraphQLServer.post('/sendSMS', passport.authenticate('bearer', { session: false }), (req, res) => {\n    if (req.user == null) {\n        res.status(400).send({ message: 'Unauthorize' })\n    } else {\n        var body = {\n            to: req.body.to.split(','),\n            text: req.body.text\n        }\n        var options = {\n            url: 'https://api.clickatell.com/rest/message',\n            headers: {\n                'Authorization': \"bearer 0WfPOyBctycsSud4NFQzSlq1hpEYfrLJb0pyqG.UrQyW24RJUchUx.J_n08vjw1U\",\n                'X-Version': '1',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: body,\n            json: true\n        };\n        request.post(options, (error, response, body) => {\n            if (!error && response.statusCode == 202) {\n                res.send(body.data)\n            } else {\n                res.send(error)\n            }\n        })\n    }\n\n})\n\ngraphQLServer.post('/login', passport.authenticate('local', { session: false, failureFlash: true }), (req, res) => {\n    var token = jwt.sign({ id: req.user.parent_id, auth: true, mutate: ['ALL'], query: ['ALL'] }, config.PARENT_APP_TOKEN, { expiresIn: 3600 })\n    res.send({\n        token: token,\n        user: req.user\n    })\n});\n\ngraphQLServer.post('/prepareEmailVerify', async(req, res) => {\n    var parent = await Parent.find({\n        where: {\n            email: req.body.email\n        }\n    })\n    if (parent != null) {\n        var token = jwt.sign({ id: parent.get().parent_id, auth: false, mutate: ['UPDATE_PASSWORD'], query: ['SELECT_PARENT'] }, config.PARENT_APP_TOKEN, { expiresIn: 3600 })\n        res.send({\n            token: token\n        })\n    } else {\n        res.send({\n            token: \"\"\n        })\n    }\n})\n\ngraphQLServer.get('/testPush', () => {\n    // var token = \"cvPJKYZvBoY:APA91bF4WN3q-0_DwrpNLoAmZwsQSBmb5N0sjP5-G-dp18TK0AdwY_zNDiOQPIccp_URnuLOi2Kv8hDLfA1HLgQTtlJh63yiiBazB9gbT7FGSEw_gKGo2ttHGmsHZHt5JTyKIR7WfH2F\"\n\n})\n\n\n// graphQLServer.get('/refreshJWT', passport.authenticate('bearer', { session: false }), (req, res) => {\n//     Parent.find({\n//             attributes: ['token', 'parent_id'],\n//             where: {\n//                 token: {\n//                     $eq: req.user\n//                 }\n//             }\n//         })\n//         .then((parent) => {\n//             if (parent != null) {\n//                 var token = jwt.sign({ id: parent.parent_id, }, config.JWT_SECRET, { expiresIn: 3600 })\n//                 Parent.update({ token: token }, { where: { parent_id: parent.parent_id } })\n//                     .then(() => {\n//                         res.send({\n//                             token: token\n//                         })\n//                     })\n//             } else {\n//                 res.send({ message: 'Not found this token in system' })\n//             }\n//         })\n// })\n\ngraphQLServer.listen(GRAPHQL_PORT, () => console.log(\n    `GraphiQL is now running on http://localhost:${GRAPHQL_PORT}/graphiql`\n));"]}