{"version":3,"sources":["../src/auth.js"],"names":["LocalStrategy","require","Strategy","crypto","use","username","password","done","shareDB","ParentGlobal","find","attributes","where","email","createHash","update","digest","parentGlobal","ParentDetail","findAll","parent_id","get","id","parentDetail","databases","map","item","database_name","companiesLogo","i","length","DB","console","log","Parent","account","Account","account_id","companyLogo","push","companyName","name","logo","company_logo","result","Object","assign","message","serializeUser","user","deserializeUser","err"],"mappings":";;;;;;;;;;AAAA;;;;AAGA;;;;AAFA,IAAIA,gBAAgBC,QAAQ,gBAAR,EAA0BC,QAA9C;AACA;;AAEA,IAAMC,SAASF,QAAQ,QAAR,CAAf;;AAEA,mBAASG,GAAT,CAAa,OAAb,EAAsB,IAAIJ,aAAJ;AAAA,0EAClB,iBAAMK,QAAN,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,+BADR,GACkB,iCAAiB,WAAjB,CADlB;AAAA;AAAA,+BAE6BA,QAAQC,YAAR,CAAqBC,IAArB,CAA0B;AAC3CC,wCAAY,CAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,CAD+B;AAE3CC,mCAAO;AACHC,uCAAOR,QADJ;AAEHC,0CAAUH,OAAOW,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCT,QAAhC,EAA0CU,MAA1C,CAAiD,KAAjD;AAFP;AAFoC,yBAA1B,CAF7B;;AAAA;AAEQC,oCAFR;;AAAA,8BAqBQA,gBAAgB,IArBxB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAsBiCT,QAAQU,YAAR,CAAqBC,OAArB,CAA6B;AAClDP,mCAAO;AACHQ,2CAAWH,aAAaI,GAAb,GAAmBC;AAD3B;AAD2C,yBAA7B,CAtBjC;;AAAA;AAsBYC,oCAtBZ;AA2BYC,iCA3BZ,GA2BwBD,aAAaE,GAAb,CAAiB,UAACC,IAAD;AAAA,mCAAUA,KAAKL,GAAL,GAAWM,aAArB;AAAA,yBAAjB,CA3BxB;AA4BYC,qCA5BZ,GA4B4B,EA5B5B;AA6BiBC,yBA7BjB,GA6BqB,CA7BrB;;AAAA;AAAA,8BA6BwBA,IAAIL,UAAUM,MA7BtC;AAAA;AAAA;AAAA;;AA8BgBC,0BA9BhB,GA8BqB,iCAAiBP,UAAUK,CAAV,CAAjB,CA9BrB;;AA+BYG,gCAAQC,GAAR,CAAYT,UAAUK,CAAV,CAAZ;AA/BZ;AAAA,+BAgCgCE,GAAGG,MAAH,CAAUxB,IAAV,CAAe;AAC/BC,wCAAY,CAAC,SAAD,CADmB;AAE/BC,mCAAO;AACHC,uCAAOI,aAAaI,GAAb,GAAmBR;AADvB;AAFwB,yBAAf,CAhChC;;AAAA;AAgCgBsB,+BAhChB;;AAsCYH,gCAAQC,GAAR,CAAYE,OAAZ;;AAtCZ,8BAuCgBA,WAAW,IAvC3B;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAwCwCJ,GAAGK,OAAH,CAAW1B,IAAX,CAAgB;AACpCC,wCAAY,CAAC,MAAD,EAAS,cAAT,CADwB;AAEpCC,mCAAO;AACHyB,4CAAYF,QAAQd,GAAR,GAAcc;AADvB;AAF6B,yBAAhB,CAxCxC;;AAAA;AAwCoBG,mCAxCpB;;AA8CgBV,sCAAcW,IAAd,CAAmB;AACfC,yCAAaF,YAAYjB,GAAZ,GAAkBoB,IADhB;AAEfC,kCAAMJ,YAAYjB,GAAZ,GAAkBsB;AAFT,yBAAnB;;AA9ChB;AA6B8Cd,2BA7B9C;AAAA;AAAA;;AAAA;AAoDYe,8BApDZ,GAoDqBC,OAAOC,MAAP,CAAc,EAAd,EAAkB7B,aAAaI,GAAb,EAAlB,EAAsC,EAAEG,oBAAF,EAAaI,4BAAb,EAAtC,CApDrB;AAAA,yDAqDerB,KAAK,IAAL,EAAWqC,MAAX,CArDf;;AAAA;AAAA,yDAuDerC,KAAK,IAAL,EAAW,IAAX,EAAiB,EAAEwC,SAAS,+BAAX,EAAjB,CAvDf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADkB;;AAAA;AAAA;AAAA;AAAA,IAAtB;AA4DA,mBAASC,aAAT,CAAuB,UAASC,IAAT,EAAe1C,IAAf,EAAqB;AACxCA,SAAK,IAAL,EAAW0C,KAAK3B,EAAhB;AACH,CAFD;AAGA,mBAAS4B,eAAT;AAAA,2EAAyB,kBAAM5B,EAAN,EAAUf,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,+BADiB,GACP,iCAAiB,WAAjB,CADO;AAAA;AAAA,+BAEIA,QAAQC,YAAR,CAAqBC,IAArB,CAA0B;AAC/CC,wCAAY,CAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,CADmC;AAE/CC,mCAAO;AACHC,uCAAOR,QADJ;AAEHC,0CAAUH,OAAOW,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCT,QAAhC,EAA0CU,MAA1C,CAAiD,KAAjD;AAFP;AAFwC,yBAA1B,CAFJ;;AAAA;AAEjBC,oCAFiB;AAAA;AAAA,+BASIT,QAAQU,YAAR,CAAqBC,OAArB,CAA6B;AAClDP,mCAAO;AACHQ,2CAAWH,aAAaI,GAAb,GAAmBC;AAD3B;AAD2C,yBAA7B,CATJ;;AAAA;AASjBC,oCATiB;AAcjBC,iCAdiB,GAcLD,aAAaE,GAAb,CAAiB,UAACC,IAAD;AAAA,mCAAUA,KAAKL,GAAL,GAAWM,aAArB;AAAA,yBAAjB,CAdK;AAejBC,qCAfiB,GAeD,EAfC;AAgBZC,yBAhBY,GAgBR,CAhBQ;;AAAA;AAAA,8BAgBLA,IAAIL,UAAUM,MAhBT;AAAA;AAAA;AAAA;;AAiBbC,0BAjBa,GAiBR,iCAAiBP,UAAUK,CAAV,CAAjB,CAjBQ;AAAA;AAAA,+BAkBGE,GAAGG,MAAH,CAAUxB,IAAV,CAAe;AAC/BC,wCAAY,CAAC,YAAD,CADmB;AAE/BC,mCAAO;AACHC,uCAAOI,aAAaI,GAAb,GAAmBR;AADvB;AAFwB,yBAAf,CAlBH;;AAAA;AAkBbsB,+BAlBa;;AAAA,8BAwBbA,QAAQL,MAAR,GAAiB,CAxBJ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAyBWC,GAAGK,OAAH,CAAW1B,IAAX,CAAgB;AACpCC,wCAAY,CAAC,MAAD,EAAS,cAAT,CADwB;AAEpCC,mCAAO;AACHyB,4CAAYF,QAAQd,GAAR,GAAcgB;AADvB;AAF6B,yBAAhB,CAzBX;;AAAA;AAyBTC,mCAzBS;;AA+BbV,sCAAcW,IAAd,CAAmB;AACfC,yCAAaF,YAAYjB,GAAZ,GAAkBoB,IADhB;AAEfC,kCAAMJ,YAAYjB,GAAZ,GAAkBsB;AAFT,yBAAnB;;AA/Ba;AAgBiBd,2BAhBjB;AAAA;AAAA;;AAAA;AAqCjBe,8BArCiB,GAqCRC,OAAOC,MAAP,CAAc,EAAd,EAAkB7B,aAAaI,GAAb,EAAlB,EAAsC,EAAEG,oBAAF,EAAaI,4BAAb,EAAtC,CArCQ;AAAA,0DAsCdrB,KAAK4C,GAAL,EAAUP,MAAV,CAtCc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA;AAuCQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AAlDJ","file":"auth.js","sourcesContent":["import passport from 'passport';\r\nlet LocalStrategy = require('passport-local').Strategy;\r\n// import { Parent } from './data/connector';\r\nimport { sequelizeInitial } from './data/connector';\r\nconst crypto = require('crypto');\r\n\r\npassport.use('local', new LocalStrategy(\r\n    async(username, password, done) => {\r\n        var shareDB = sequelizeInitial('ecm_share');\r\n        var parentGlobal = await shareDB.ParentGlobal.find({\r\n                attributes: ['id', 'email', 'phone'],\r\n                where: {\r\n                    email: username,\r\n                    password: crypto.createHash('md5').update(password).digest('hex')\r\n                }\r\n            })\r\n            // var schoolDB = sequelizeInitial(parentGlobal.get().database_school)\r\n            // let checkPassword = await schoolDB.Parent.find({\r\n            //     attributes: ['parent_id', 'gender', 'parent_name', 'phone_m', 'email'],\r\n            //     where: {\r\n            //         email: {\r\n            //             $eq: username\r\n            //         },\r\n            //         password: {\r\n            //             $eq: crypto.createHash('md5').update(password).digest('hex')\r\n            //         }\r\n            //     }\r\n            // })\r\n        if (parentGlobal != null) {\r\n            var parentDetail = await shareDB.ParentDetail.findAll({\r\n                where: {\r\n                    parent_id: parentGlobal.get().id\r\n                }\r\n            })\r\n            var databases = parentDetail.map((item) => item.get().database_name)\r\n            var companiesLogo = []\r\n            for (let i = 0; i < databases.length; i++) {\r\n                var DB = sequelizeInitial(databases[i]);\r\n                console.log(databases[i])\r\n                var account = await DB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: {\r\n                        email: parentGlobal.get().email\r\n                    }\r\n                })\r\n                console.log(account)\r\n                if (account != null) {\r\n                    var companyLogo = await DB.Account.find({\r\n                        attributes: ['name', 'company_logo'],\r\n                        where: {\r\n                            account_id: account.get().account\r\n                        }\r\n                    })\r\n                    companiesLogo.push({\r\n                        companyName: companyLogo.get().name,\r\n                        logo: companyLogo.get().company_logo\r\n                    })\r\n                }\r\n            }\r\n            var result = Object.assign({}, parentGlobal.get(), { databases, companiesLogo })\r\n            return done(null, result)\r\n        } else {\r\n            return done(null, null, { message: 'Invalid username or password.' })\r\n        }\r\n    }\r\n));\r\npassport.serializeUser(function(user, done) {\r\n    done(null, user.id);\r\n});\r\npassport.deserializeUser(async(id, done) => {\r\n    var shareDB = sequelizeInitial('ecm_share');\r\n    var parentGlobal = await shareDB.ParentGlobal.find({\r\n        attributes: ['id', 'email', 'phone'],\r\n        where: {\r\n            email: username,\r\n            password: crypto.createHash('md5').update(password).digest('hex')\r\n        }\r\n    })\r\n    var parentDetail = await shareDB.ParentDetail.findAll({\r\n        where: {\r\n            parent_id: parentGlobal.get().id\r\n        }\r\n    })\r\n    var databases = parentDetail.map((item) => item.get().database_name)\r\n    var companiesLogo = []\r\n    for (let i = 0; i < databases.length; i++) {\r\n        var DB = sequelizeInitial(databases[i]);\r\n        var account = await DB.Parent.find({\r\n            attributes: ['account_id'],\r\n            where: {\r\n                email: parentGlobal.get().email\r\n            }\r\n        })\r\n        if (account.length > 0) {\r\n            var companyLogo = await DB.Account.find({\r\n                attributes: ['name', 'company_logo'],\r\n                where: {\r\n                    account_id: account.get().account_id\r\n                }\r\n            })\r\n            companiesLogo.push({\r\n                companyName: companyLogo.get().name,\r\n                logo: companyLogo.get().company_logo\r\n            })\r\n        }\r\n    }\r\n    var result = Object.assign({}, parentGlobal.get(), { databases, companiesLogo })\r\n    return done(err, result)\r\n        // return done(err, parentGlobal.get());\r\n        // Parent.find({\r\n        //         attributes: ['parent_id', 'gender', 'parent_name', 'phone_m', 'email'],\r\n        //         where: {\r\n        //             parent_id: {\r\n        //                 $eq: id\r\n        //             }\r\n        //         }\r\n        //     })\r\n        //     .then((parent, err) => {\r\n\r\n    //     })\r\n});"]}