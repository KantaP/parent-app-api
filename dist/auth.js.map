{"version":3,"sources":["../src/auth.js"],"names":["LocalStrategy","require","Strategy","crypto","use","username","password","done","shareDB","ParentGlobal","find","attributes","where","email","createHash","update","digest","parentGlobal","ParentDetail","findAll","parent_id","get","id","parentDetail","result","Object","assign","databases","map","item","database_name","message","serializeUser","user","deserializeUser","err"],"mappings":"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","file":"auth.js","sourcesContent":["import passport from 'passport';\r\nlet LocalStrategy = require('passport-local').Strategy;\r\n// import { Parent } from './data/connector';\r\nimport { sequelizeInitial } from './data/connector';\r\nconst crypto = require('crypto');\r\n\r\npassport.use('local', new LocalStrategy(\r\n    async(username, password, done) => {\r\n        var shareDB = sequelizeInitial('ecm_share');\r\n        var parentGlobal = await shareDB.ParentGlobal.find({\r\n                attributes: ['id', 'email', 'phone'],\r\n                where: {\r\n                    email: username,\r\n                    password: crypto.createHash('md5').update(password).digest('hex')\r\n                }\r\n            })\r\n            // var schoolDB = sequelizeInitial(parentGlobal.get().database_school)\r\n            // let checkPassword = await schoolDB.Parent.find({\r\n            //     attributes: ['parent_id', 'gender', 'parent_name', 'phone_m', 'email'],\r\n            //     where: {\r\n            //         email: {\r\n            //             $eq: username\r\n            //         },\r\n            //         password: {\r\n            //             $eq: crypto.createHash('md5').update(password).digest('hex')\r\n            //         }\r\n            //     }\r\n            // })\r\n        if (parentGlobal != null) {\r\n            var parentDetail = await shareDB.ParentDetail.findAll({\r\n                where: {\r\n                    parent_id: parentGlobal.get().id\r\n                }\r\n            })\r\n            var result = Object.assign({}, parentGlobal.get(), { databases: parentDetail.map((item) => item.get().database_name) })\r\n            return done(null, result)\r\n        } else {\r\n            return done(null, null, { message: 'Invalid username or password.' })\r\n        }\r\n    }\r\n));\r\npassport.serializeUser(function(user, done) {\r\n    done(null, user.id);\r\n});\r\npassport.deserializeUser(async(id, done) => {\r\n    var shareDB = sequelizeInitial('ecm_share');\r\n    var parentGlobal = await shareDB.ParentGlobal.find({\r\n        attributes: ['id', 'email', 'phone'],\r\n        where: {\r\n            email: username,\r\n            password: crypto.createHash('md5').update(password).digest('hex')\r\n        }\r\n    })\r\n    var parentDetail = await shareDB.ParentDetail.findAll({\r\n        where: {\r\n            parent_id: parentGlobal.get().id\r\n        }\r\n    })\r\n    var result = Object.assign({}, parentGlobal.get(), { databases: parentDetail.map((item) => item.get().database_name) })\r\n    return done(err, result)\r\n        // return done(err, parentGlobal.get());\r\n        // Parent.find({\r\n        //         attributes: ['parent_id', 'gender', 'parent_name', 'phone_m', 'email'],\r\n        //         where: {\r\n        //             parent_id: {\r\n        //                 $eq: id\r\n        //             }\r\n        //         }\r\n        //     })\r\n        //     .then((parent, err) => {\r\n\r\n    //     })\r\n});"]}