{"version":3,"sources":["../src/auth.js"],"names":["LocalStrategy","require","Strategy","crypto","use","username","password","done","find","attributes","where","email","$eq","createHash","update","digest","checkPassword","get","message","serializeUser","user","parent_id","deserializeUser","id","then","parent","err"],"mappings":";;;;;;;;;;AAAA;;;;AAEA;;;;AADA,IAAIA,gBAAgBC,QAAQ,gBAAR,EAA0BC,QAA9C;;AAEA,IAAMC,SAASF,QAAQ,QAAR,CAAf;;AAEA,mBAASG,GAAT,CAAa,OAAb,EAAsB,IAAIJ,aAAJ;AAAA,0EAClB,iBAAMK,QAAN,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAE8B,kBAAOC,IAAP,CAAY;AAClCC,wCAAY,CAAC,WAAD,EAAc,QAAd,EAAwB,aAAxB,EAAuC,SAAvC,EAAkD,OAAlD,CADsB;AAElCC,mCAAO;AACHC,uCAAO;AACHC,yCAAKP;AADF,iCADJ;AAIHC,0CAAU;AACNM,yCAAKT,OAAOU,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCR,QAAhC,EAA0CS,MAA1C,CAAiD,KAAjD;AADC;AAJP;AAF2B,yBAAZ,CAF9B;;AAAA;AAEQC,qCAFR;;AAAA,8BAaQA,iBAAiB,IAbzB;AAAA;AAAA;AAAA;;AAAA,yDAceT,KAAK,IAAL,EAAWS,cAAcC,GAAd,EAAX,CAdf;;AAAA;AAAA,yDAgBeV,KAAK,IAAL,EAAW,IAAX,EAAiB,EAAEW,SAAS,+BAAX,EAAjB,CAhBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADkB;;AAAA;AAAA;AAAA;AAAA,IAAtB;AAqBA,mBAASC,aAAT,CAAuB,UAASC,IAAT,EAAeb,IAAf,EAAqB;AACxCA,SAAK,IAAL,EAAWa,KAAKC,SAAhB;AACH,CAFD;AAGA,mBAASC,eAAT,CAAyB,UAASC,EAAT,EAAahB,IAAb,EAAmB;AACxC,sBAAOC,IAAP,CAAY;AACJC,oBAAY,CAAC,WAAD,EAAc,QAAd,EAAwB,aAAxB,EAAuC,SAAvC,EAAkD,OAAlD,CADR;AAEJC,eAAO;AACHW,uBAAW;AACPT,qBAAKW;AADE;AADR;AAFH,KAAZ,EAQKC,IARL,CAQU,UAACC,MAAD,EAASC,GAAT,EAAiB;AACnB,eAAOnB,KAAKmB,GAAL,EAAUD,OAAOR,GAAP,EAAV,CAAP;AACH,KAVL;AAWH,CAZD","file":"auth.js","sourcesContent":["import passport from 'passport';\r\nlet LocalStrategy = require('passport-local').Strategy;\r\nimport { Parent } from './data/connector';\r\nconst crypto = require('crypto');\r\n\r\npassport.use('local', new LocalStrategy(\r\n    async(username, password, done) => {\r\n\r\n        let checkPassword = await Parent.find({\r\n            attributes: ['parent_id', 'gender', 'parent_name', 'phone_m', 'email'],\r\n            where: {\r\n                email: {\r\n                    $eq: username\r\n                },\r\n                password: {\r\n                    $eq: crypto.createHash('md5').update(password).digest('hex')\r\n                }\r\n            }\r\n        })\r\n        if (checkPassword != null) {\r\n            return done(null, checkPassword.get())\r\n        } else {\r\n            return done(null, null, { message: 'Invalid username or password.' })\r\n        }\r\n    }\r\n));\r\npassport.serializeUser(function(user, done) {\r\n    done(null, user.parent_id);\r\n});\r\npassport.deserializeUser(function(id, done) {\r\n    Parent.find({\r\n            attributes: ['parent_id', 'gender', 'parent_name', 'phone_m', 'email'],\r\n            where: {\r\n                parent_id: {\r\n                    $eq: id\r\n                }\r\n            }\r\n        })\r\n        .then((parent, err) => {\r\n            return done(err, parent.get());\r\n        })\r\n});"]}