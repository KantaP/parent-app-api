{"version":3,"sources":["../../src/data/resolvers.js"],"names":["crypto","require","jwt","checkPermission","userPermissions","permission","check","filter","item","length","globalDB","makeJourney","pickUpArr","dropOffArr","response","collection_address","destination_address","extra_address","findMovementData","collection_address_data","destination_address_data","Object","assign","get","time_end","tb_movement_option","date_end","utc","format","address","latlng","add_lat","add_lng","des_lat","des_lng","findExtraRoute","quote_id","movement_order","extra_address_data","map","extra","findPassengerLog","point_id","passenger_id","Promise","resolve","reject","PassengerLog","findAll","where","$eq","order","limit","then","passengerLogs","i","Movement","find","attributes","movement","collection","destination","movement_start","movement_end","$between","movements","movement_id","include","model","MovementOptions","as","catch","err","console","log","message","resolvers","Query","parentGlobalSelect","_","args","request","user","query","database","ParentGlobal","parent","result","databases","schoolDB","Parent","parentData","Account","account_id","account","accountData","push","school_name","name","parentPassengers","email","Passengers","ParentPassenger","parent_id","passengerData","routeToday","Quote","JobPassengers","required","date_out","status_re","$ne","quote","jobs","jobData","job","jobDataPickUp","pickup","jobDataDropOff","journeys","journeyData","col_passenger_log","des_passenger_log","passenger_log","time_start","datetime_start","date_start","datetime_end","isBetween","peroid","isBefore","isAfter","j_id","date_today","Tracking","tracking","passengers","schoolContact","Mutation","parentPasswordUpdate","mutate","msg","status","input","createHash","update","digest","shareDB","password","id","parentUpdate","parentPushTokenCreate","ParentToken","create","push_token","parentTokenCreate","Date","description","parseValue","value","serialize","parseLiteral","ast"],"mappings":"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","file":"resolvers.js","sourcesContent":["import { sequelizeInitial } from './connector';\r\nimport { GraphQLScalarType } from 'graphql';\r\nimport config from '../config';\r\nimport moment from 'moment';\r\nconst crypto = require('crypto');\r\nconst jwt = require('jsonwebtoken');\r\nconst checkPermission = (userPermissions, permission) => {\r\n    var check = userPermissions.filter((item) => item == permission || item == 'ALL')\r\n    if (check.length > 0) return true\r\n    else return false\r\n}\r\nvar globalDB = null\r\nconst makeJourney = async(pickUpArr, dropOffArr) => {\r\n    var response = {\r\n        collection_address: {},\r\n        destination_address: {},\r\n        extra_address: []\r\n    }\r\n    var collection_address_data = await findMovementData(pickUpArr['point_id'], ['date_start', 'time_start', 'collection_address', 'progress', 'add_lat', 'add_lng', 'movement_order'])\r\n    var destination_address_data = await findMovementData(dropOffArr['point_id'], ['date_start', 'time_start', 'destination_address', 'progress', 'des_lat', 'des_lng', 'movement_order'])\r\n    response = {\r\n        ...response,\r\n        collection_address: Object.assign({}, collection_address_data.get(), {\r\n            time_end: moment(collection_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: collection_address_data.get().collection_address,\r\n            latlng: collection_address_data.get().add_lat + ',' + collection_address_data.get().add_lng\r\n        })\r\n    }\r\n    response = {\r\n        ...response,\r\n        destination_address: Object.assign({}, destination_address_data.get(), {\r\n            time_end: moment(destination_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: destination_address_data.get().destination_address,\r\n            latlng: destination_address_data.get().des_lat + ',' + destination_address_data.get().des_lng\r\n        })\r\n    }\r\n    var extra_address_data = await findExtraRoute(pickUpArr.quote_id,\r\n        collection_address_data.get().movement_order,\r\n        destination_address_data.get().movement_order)\r\n    response.extra_address = extra_address_data\r\n        .filter((item) => (item.get().movement_order > collection_address_data.get().movement_order))\r\n        .map((extra) => {\r\n            return {\r\n                movement_order: extra.get().movement_order,\r\n                latlng: extra.get().add_lat + ',' + extra.get().add_lng\r\n            }\r\n        })\r\n    return response\r\n}\r\n\r\nconst findPassengerLog = ({ point_id, passenger_id, quote_id }) => {\r\n    return new Promise((resolve, reject) => {\r\n        globalDB.PassengerLog.findAll({\r\n                where: {\r\n                    point_id: {\r\n                        $eq: point_id\r\n                    },\r\n                    passenger_id: {\r\n                        $eq: passenger_id\r\n                    },\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    }\r\n                },\r\n                order: [\r\n                    ['log_id', 'DESC']\r\n                ],\r\n                limit: 1\r\n            })\r\n            .then(async(passengerLogs) => {\r\n                if (passengerLogs == null) resolve(null)\r\n                else {\r\n                    for (let i = 0; i < passengerLogs.length; i++) {\r\n                        // console.log(passengerLogs[i])\r\n                        var movement = await globalDB.Movement.find({\r\n                                where: {\r\n                                    movement_order: passengerLogs[i].get().movement_order,\r\n                                    quote_id: quote_id\r\n                                },\r\n                                attributes: ['collection_address', 'destination_address']\r\n                            })\r\n                            // console.log(movement)\r\n                        passengerLogs[i].address = {\r\n                            collection: movement.get().collection_address,\r\n                            destination: movement.get().destination_address\r\n                        }\r\n                    }\r\n                    resolve(passengerLogs)\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nconst findExtraRoute = (quote_id, movement_start, movement_end) => {\r\n    return new Promise((resolve, reject) => {\r\n        globalDB.Movement.findAll({\r\n                attributes: ['movement_order', 'add_lat', 'add_lng'],\r\n                where: {\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    },\r\n                    movement_order: {\r\n                        $between: [movement_start, movement_end]\r\n                    }\r\n                }\r\n            })\r\n            .then((movements) => {\r\n                resolve(movements)\r\n            })\r\n    })\r\n}\r\n\r\nconst findMovementData = (movement_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        // console.log(movement_id)\r\n        globalDB.Movement.find({\r\n                attributes: attributes,\r\n                include: [{\r\n                    model: globalDB.MovementOptions,\r\n                    as: 'tb_movement_option',\r\n                    attributes: ['date_end']\r\n                }],\r\n                where: {\r\n                    movement_id: {\r\n                        $eq: movement_id\r\n                    }\r\n                }\r\n            })\r\n            .then((movement) => {\r\n                resolve(movement)\r\n            })\r\n            .catch((err) => console.log(err.message))\r\n    })\r\n}\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        parentGlobalSelect(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_GLOBAL')) {\r\n                return null\r\n            }\r\n            var database = sequelizeInitial('ecm_share')\r\n            return database.ParentGlobal.find({\r\n                where: args\r\n            })\r\n        },\r\n        async parent(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: args\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                result.push({\r\n                    school_name: accountData.get().name,\r\n                    parent: parentData.get()\r\n                })\r\n                schoolDB = null\r\n            }\r\n            return result\r\n                // return Parent.find({ where: args })\r\n        },\r\n        async parentPassengers(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_PASSENGERS')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['parent_id', 'account'],\r\n                    where: {\r\n                        email: request.user.email\r\n                    }\r\n                })\r\n                var passengerData = await schoolDB.Passengers.findAll({\r\n                    include: [{\r\n                        model: schoolDB.ParentPassenger,\r\n                        where: {\r\n                            parent_id: parentData.get().parent_id\r\n                        }\r\n                    }]\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                for (let i = 0; i < passengerData.length; i++) {\r\n                    passengerData[i].routeToday = []\r\n                    var quote = await schoolDB.Quote.find({\r\n                        attributes: ['quote_id'],\r\n                        include: [{\r\n                            attributes: [],\r\n                            model: schoolDB.JobPassengers,\r\n                            required: true\r\n                        }],\r\n                        where: {\r\n                            date_out: {\r\n                                $between: [moment().format('YYYY-MM-DD') + ' 00:00:00', moment().format('YYYY-MM-DD') + ' 23:59:59']\r\n                            },\r\n                            account: {\r\n                                $eq: accountData.get().account_id\r\n                            },\r\n                            status_re: {\r\n                                $ne: 'E'\r\n                            }\r\n                        },\r\n                    })\r\n                    if (quote == null) {\r\n                        continue;\r\n                    }\r\n                    var jobs = await schoolDB.JobPassengers.findAll({\r\n                        attributes: ['quote_id', 'point_id', 'pickup', 'passenger_id', 'j_id'],\r\n                        where: {\r\n                            quote_id: {\r\n                                $eq: quote.quote_id\r\n                            },\r\n                            passenger_id: passengerData[i].passenger_id\r\n                        }\r\n                    })\r\n                    if (jobs == null) {\r\n                        continue\r\n                    }\r\n                    globalDB = schoolDB\r\n                    var jobData = jobs.map((job) => job.get())\r\n                    var jobDataPickUp = jobData.filter((job) => job.pickup == 1)\r\n                    var jobDataDropOff = jobData.filter((job) => job.pickup == 0)\r\n                    var journeys = []\r\n                    if (jobDataPickUp.length > 0 && jobDataDropOff.length > 0) {\r\n                        for (let i = 0; i < jobDataPickUp.length; i++) {\r\n                            var journeyData = await makeJourney(jobDataPickUp[i], jobDataDropOff[i])\r\n                            var col_passenger_log = await findPassengerLog(jobDataPickUp[i])\r\n                            var des_passenger_log = await findPassengerLog(jobDataDropOff[i])\r\n                            journeyData.collection_address.passenger_log = (col_passenger_log.length > 0) ? col_passenger_log.map((item) => item.get()) : []\r\n                            journeyData.destination_address.passenger_log = (des_passenger_log) ? des_passenger_log.map((item) => item.get()) : []\r\n                            journeyData.collection_address.time_start = moment(journeyData.collection_address.time_start, 'HH:mm:ss').format('HH:mm')\r\n                            var datetime_start = moment(`${journeyData.collection_address.date_start} ${journeyData.collection_address.time_start}`, 'YYYY-MM-DD HH:mm').utc()\r\n                            var datetime_end = moment(`${journeyData.destination_address.date_start} ${journeyData.destination_address.time_end}`, 'YYYY-MM-DD HH:mm').utc()\r\n                            if (moment().isBetween(datetime_start, datetime_end)) {\r\n                                journeyData.peroid = 'current'\r\n                            } else if (moment().isBefore(datetime_start)) {\r\n                                journeyData.peroid = 'next'\r\n                            } else if (moment().isAfter(datetime_end)) {\r\n                                journeyData.peroid = 'previous'\r\n                            }\r\n                            journeyData.j_id = jobDataPickUp[i].j_id\r\n                            journeyData.date_today = moment().format('DD/MM/YYYY')\r\n                            journeyData.tracking = await schoolDB.Tracking.find({\r\n                                order: [\r\n                                    ['track_id', 'DESC']\r\n                                ],\r\n                                attributes: ['lat', 'lng', 'timestamp', 'j_id'],\r\n                                where: {\r\n                                    j_id: {\r\n                                        $eq: jobDataPickUp[i].j_id\r\n                                    }\r\n                                }\r\n                            })\r\n                            passengerData[i].routeToday.push(journeyData)\r\n                        }\r\n                    }\r\n                }\r\n                result.push({\r\n                    school_name: accountData.get().name,\r\n                    passengers: passengerData\r\n                })\r\n                schoolDB = null\r\n            }\r\n            return result\r\n        },\r\n        async schoolContact(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_SCHOOL_CONTACT')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: {\r\n                        email: request.user.email\r\n                    }\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                result.push(accountData.get())\r\n            }\r\n            return result\r\n        }\r\n    },\r\n    Mutation: {\r\n        async parentPasswordUpdate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'UPDATE_PASSWORD')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            args.input['password'] = crypto.createHash('md5').update(args.input['password']).digest('hex');\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentUpdate = await shareDB.ParentGlobal.update({ password: args.input['password'] }, { where: { email: args.input['email'], id: request.user.id } })\r\n                return {\r\n                    msg: \"Password has been updated\",\r\n                    status: true\r\n                }\r\n            } catch (err) {\r\n                return {\r\n                    msg: err.message,\r\n                    status: false\r\n                }\r\n            }\r\n        },\r\n        async parentPushTokenCreate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'CREATE_PUSH_TOKEN')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentTokenCreate = await shareDB.ParentToken.create({\r\n                    push_token: args.input['push_token'],\r\n                    parent_id: request.user.id\r\n                })\r\n                return { msg: 'New token has been added', status: true }\r\n            } catch (err) {\r\n                return { msg: err.message, status: false }\r\n            }\r\n        }\r\n    },\r\n    Date: new GraphQLScalarType({\r\n        name: 'Date',\r\n        description: 'Date custom scalar type',\r\n        parseValue(value) {\r\n            return moment(value); // value from the client\r\n        },\r\n        serialize(value) {\r\n            return moment(value).utc().format('DD-MM-YYYY HH:mm:ss'); // value sent to the client\r\n        },\r\n        parseLiteral(ast) {},\r\n    })\r\n}\r\n\r\nexport default resolvers"]}