{"version":3,"sources":["../../src/data/resolvers.js"],"names":["crypto","require","jwt","checkPermission","userPermissions","permission","check","filter","item","length","globalDB","makeJourney","pickUpArr","dropOffArr","response","collection_address","destination_address","extra_address","findMovementData","undefined","collection_address_data","destination_address_data","Object","assign","get","time_end","tb_movement_option","date_end","utc","format","address","latlng","add_lat","add_lng","des_lat","des_lng","findExtraRoute","quote_id","movement_order","extra_address_data","map","extra","findPassengerLog","point_id","passenger_id","pickup","Promise","resolve","reject","JobPassengers","findAll","where","$eq","limit","then","jobPassenger","console","log","type_code","jobPassengerItem","action_point_id","status","passengerLog","log_type_code","date_time_scan","route_type","Movement","find","movement_id","attributes","movement","collection","destination","dataValues","movement_start","movement_end","$between","movements","include","model","MovementOptions","as","required","catch","err","message","resolvers","Query","parentGlobalSelect","_","args","request","user","query","database","ParentGlobal","parent","result","i","databases","schoolDB","Parent","parentData","Account","account_id","account","accountData","push","school_name","name","parentPassengers","email","Passengers","ParentPassenger","parent_id","order","passengerData","routeToday","Quote","date_out","status_re","$ne","quote","jobs","jobData","job","jobDataPickUp","jobDataDropOff","journeys","j","journeyData","col_passenger_log","des_passenger_log","passenger_log","time_start","datetime_start","date_start","subtract","datetime_end","isBetween","peroid","isBefore","isAfter","j_id","date_today","Tracking","tracking","passengers","schoolContact","parentContactOptions","Mutation","parentPasswordUpdate","mutate","msg","input","createHash","update","digest","shareDB","password","id","parentUpdate","parentPushTokenCreate","ParentToken","create","push_token","parentTokenCreate","parentPushTokenDelete","destroy","parentTokenDelete","parentUpdateContactOption","updateItem","parentContactOptionsUpdate","Date","description","parseValue","value","serialize","parseLiteral","ast"],"mappings":"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","file":"resolvers.js","sourcesContent":["import { sequelizeInitial } from './connector';\r\nimport { GraphQLScalarType } from 'graphql';\r\nimport config from '../config';\r\nimport moment from 'moment';\r\nconst crypto = require('crypto');\r\nconst jwt = require('jsonwebtoken');\r\nconst checkPermission = (userPermissions, permission) => {\r\n    var check = userPermissions.filter((item) => item == permission || item == 'ALL')\r\n    if (check.length > 0) return true\r\n    else return false\r\n}\r\nvar globalDB = null\r\nconst makeJourney = async(pickUpArr, dropOffArr) => {\r\n    var response = {\r\n        collection_address: {},\r\n        destination_address: {},\r\n        extra_address: []\r\n    }\r\n    var collection_address_data = await findMovementData(pickUpArr['point_id'], ['date_start', 'time_start', 'collection_address', 'progress', 'add_lat', 'add_lng', 'movement_order']) || undefined\r\n    var destination_address_data = await findMovementData(dropOffArr['point_id'], ['date_start', 'time_start', 'destination_address', 'progress', 'des_lat', 'des_lng', 'movement_order']) || undefined\r\n    response = {\r\n        ...response,\r\n        collection_address: Object.assign({}, (collection_address_data) ? collection_address_data.get() : {}, {\r\n            time_end: moment(collection_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: collection_address_data.get().collection_address,\r\n            latlng: collection_address_data.get().add_lat + ',' + collection_address_data.get().add_lng\r\n        })\r\n    }\r\n    response = {\r\n        ...response,\r\n        destination_address: Object.assign({}, (destination_address_data) ? destination_address_data.get() : {}, {\r\n            time_end: moment(destination_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: destination_address_data.get().destination_address,\r\n            latlng: destination_address_data.get().des_lat + ',' + destination_address_data.get().des_lng\r\n        })\r\n    }\r\n    var extra_address_data = await findExtraRoute(pickUpArr.quote_id,\r\n        collection_address_data.get().movement_order,\r\n        destination_address_data.get().movement_order)\r\n    response.extra_address = extra_address_data\r\n        .filter((item) => (item.get().movement_order > collection_address_data.get().movement_order))\r\n        .map((extra) => {\r\n            return {\r\n                movement_order: extra.get().movement_order,\r\n                latlng: extra.get().add_lat + ',' + extra.get().add_lng\r\n            }\r\n        })\r\n    return response\r\n}\r\n\r\nconst findPassengerLog = ({ point_id, passenger_id, quote_id, pickup }) => {\r\n    return new Promise((resolve, reject) => {\r\n        // globalDB.PassengerLog.findAll({\r\n        //         where: {\r\n        //             point_id: {\r\n        //                 $eq: point_id\r\n        //             },\r\n        //             passenger_id: {\r\n        //                 $eq: passenger_id\r\n        //             },\r\n        //             quote_id: {\r\n        //                 $eq: quote_id\r\n        //             }\r\n        //         },\r\n        //         order: [\r\n        //             ['log_id', 'DESC']\r\n        //         ],\r\n        //         limit: 1\r\n        //     })\r\n        //     .then(async(passengerLogs) => {\r\n        //         if (passengerLogs == null) resolve(null)\r\n        //         else {\r\n        //             for (let i = 0; i < passengerLogs.length; i++) {\r\n        //                 // console.log(passengerLogs[i])\r\n        //                 var movement = await globalDB.Movement.find({\r\n        //                         where: {\r\n        //                             movement_order: passengerLogs[i].get().movement_order,\r\n        //                             quote_id: quote_id\r\n        //                         },\r\n        //                         attributes: ['collection_address', 'destination_address']\r\n        //                     })\r\n        //                     // console.log(movement)\r\n        //                 passengerLogs[i].address = {\r\n        //                     collection: movement.get().collection_address,\r\n        //                     destination: movement.get().destination_address\r\n        //                 }\r\n        //             }\r\n        //             resolve(passengerLogs)\r\n        //         }\r\n        //     })\r\n        globalDB.JobPassengers.findAll({\r\n                where: {\r\n                    point_id: {\r\n                        $eq: point_id\r\n                    },\r\n                    passenger_id: {\r\n                        $eq: passenger_id\r\n                    },\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    },\r\n                    pickup: {\r\n                        $eq: pickup\r\n                    }\r\n                },\r\n                limit: 1\r\n            })\r\n            .then(async(jobPassenger) => {\r\n                console.log(jobPassenger)\r\n                if (jobPassenger.length > 0) {\r\n                    var type_code = 0\r\n                    var jobPassengerItem = jobPassenger[0].get()\r\n                    if (jobPassengerItem.pickup == 1) {\r\n                        if (jobPassengerItem.point_id != jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && (jobPassengerItem.status == 1 || jobPassengerItem.status == -1)) {\r\n                            type_code = 3\r\n                        } else if (jobPassengerItem.point_id == jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && jobPassengerItem.status == 1) {\r\n                            type_code = 2\r\n                        }\r\n                    } else if (jobPassengerItem.pickup == 0) {\r\n                        if (jobPassengerItem.point_id != jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && jobPassengerItem.status == 1) {\r\n                            type_code = 5\r\n                        } else if (jobPassengerItem.point_id == jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && jobPassengerItem.status == 1) {\r\n                            type_code = 4\r\n                        }\r\n                    }\r\n\r\n                    var passengerLog = {\r\n                        log_type_code: type_code,\r\n                        date_time_scan: jobPassenger[0].get().date_time_scan,\r\n                        route_type: jobPassenger[0].get().pickup,\r\n                        address: {}\r\n                    }\r\n                    var movement = await globalDB.Movement.find({\r\n                            where: {\r\n                                movement_id: point_id,\r\n                                quote_id: quote_id\r\n                            },\r\n                            attributes: ['collection_address', 'destination_address']\r\n                        })\r\n                        // console.log(movement)\r\n                    passengerLog.address = {\r\n                        collection: movement.get().collection_address,\r\n                        destination: movement.get().destination_address\r\n                    }\r\n                    jobPassenger[0].dataValues = Object.assign({}, jobPassenger[0].dataValues, passengerLog)\r\n                    if (type_code != 0) {\r\n                        resolve(jobPassenger)\r\n                    } else {\r\n                        resolve([])\r\n                    }\r\n                } else {\r\n                    resolve([])\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nconst findExtraRoute = (quote_id, movement_start, movement_end) => {\r\n    return new Promise((resolve, reject) => {\r\n        globalDB.Movement.findAll({\r\n                attributes: ['movement_order', 'add_lat', 'add_lng'],\r\n                where: {\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    },\r\n                    movement_order: {\r\n                        $between: [movement_start, movement_end]\r\n                    }\r\n                }\r\n            })\r\n            .then((movements) => {\r\n                resolve(movements)\r\n            })\r\n    })\r\n}\r\n\r\nconst findMovementData = (movement_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        // console.log(movement_id)\r\n        globalDB.Movement.find({\r\n                attributes: attributes,\r\n                include: [{\r\n                    model: globalDB.MovementOptions,\r\n                    as: 'tb_movement_option',\r\n                    attributes: ['date_end'],\r\n                    required: true\r\n                }],\r\n                where: {\r\n                    movement_id: {\r\n                        $eq: movement_id\r\n                    }\r\n                }\r\n            })\r\n            .then((movement) => {\r\n                console.log('movement:' + movement_id, movement)\r\n                resolve(movement)\r\n            })\r\n            .catch((err) => console.log(err.message))\r\n    })\r\n}\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        parentGlobalSelect(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_GLOBAL')) {\r\n                return null\r\n            }\r\n            var database = sequelizeInitial('ecm_share')\r\n            return database.ParentGlobal.find({\r\n                where: args\r\n            })\r\n        },\r\n        async parent(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: args\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                result.push({\r\n                    school_name: accountData.get().name,\r\n                    parent: parentData.get()\r\n                })\r\n                schoolDB = null\r\n            }\r\n            return result\r\n                // return Parent.find({ where: args })\r\n        },\r\n        async parentPassengers(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_PASSENGERS')) {\r\n                return null\r\n            }\r\n            try {\r\n                var result = []\r\n                for (let i = 0; i < request.user.databases.length; i++) {\r\n                    var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                    var parentData = await schoolDB.Parent.find({\r\n                        attributes: ['parent_id', 'account'],\r\n                        where: {\r\n                            email: request.user.email\r\n                        }\r\n                    })\r\n                    if (parentData == null) {\r\n                        console.log('parent data null')\r\n                        return null\r\n                    }\r\n                    var passengerData = await schoolDB.Passengers.findAll({\r\n                        include: [{\r\n                            model: schoolDB.ParentPassenger,\r\n                            where: {\r\n                                parent_id: parentData.get().parent_id\r\n                            },\r\n                            order: [\r\n                                ['first_name', 'ASC']\r\n                            ]\r\n                        }]\r\n                    })\r\n                    var accountData = await schoolDB.Account.find({\r\n                        where: {\r\n                            account_id: parentData.get().account\r\n                        }\r\n                    })\r\n                    for (let i = 0; i < passengerData.length; i++) {\r\n                        passengerData[i].routeToday = []\r\n                        var quote = await schoolDB.Quote.find({\r\n                                attributes: ['quote_id'],\r\n                                include: [{\r\n                                    attributes: [],\r\n                                    model: schoolDB.JobPassengers,\r\n                                    required: true\r\n                                }],\r\n                                where: {\r\n                                    date_out: {\r\n                                        $between: [moment().format('YYYY-MM-DD') + ' 00:00:00', moment().format('YYYY-MM-DD') + ' 23:59:59']\r\n                                    },\r\n                                    account: {\r\n                                        $eq: accountData.get().account_id\r\n                                    },\r\n                                    status_re: {\r\n                                        $ne: 'E'\r\n                                    }\r\n                                },\r\n                            })\r\n                            // console.log(quote)\r\n                        if (quote == null) {\r\n                            console.log('quote data null')\r\n                            continue;\r\n                        }\r\n                        var jobs = await schoolDB.JobPassengers.findAll({\r\n                                attributes: ['quote_id', 'point_id', 'pickup', 'passenger_id', 'j_id'],\r\n                                where: {\r\n                                    quote_id: {\r\n                                        $eq: quote.quote_id\r\n                                    },\r\n                                    passenger_id: passengerData[i].passenger_id\r\n                                }\r\n                            })\r\n                            // console.log(jobs)\r\n                        if (jobs == null) {\r\n                            console.log('jobs data null')\r\n                            continue\r\n                        }\r\n                        globalDB = schoolDB\r\n                        var jobData = jobs.map((job) => job.get())\r\n                        var jobDataPickUp = jobData.filter((job) => job.pickup == 1)\r\n                        var jobDataDropOff = jobData.filter((job) => job.pickup == 0)\r\n                        var journeys = []\r\n                            // console.log(passengerData[i].passenger_id)\r\n                        if (jobDataPickUp.length > 0 && jobDataDropOff.length > 0) {\r\n                            for (let j = 0; j < jobDataPickUp.length; j++) {\r\n                                var journeyData = await makeJourney(jobDataPickUp[j], jobDataDropOff[j])\r\n                                var col_passenger_log = await findPassengerLog(jobDataPickUp[j])\r\n                                var des_passenger_log = await findPassengerLog(jobDataDropOff[j])\r\n                                console.log('col_passenger', col_passenger_log)\r\n                                console.log('des_passenger', des_passenger_log)\r\n                                journeyData.collection_address.passenger_log = (col_passenger_log.length > 0) ? col_passenger_log.map((item) => item.get()) : []\r\n                                journeyData.destination_address.passenger_log = (des_passenger_log) ? des_passenger_log.map((item) => item.get()) : []\r\n                                journeyData.collection_address.time_start = moment(journeyData.collection_address.time_start, 'HH:mm:ss').format('HH:mm')\r\n                                var datetime_start = moment(`${journeyData.collection_address.date_start} ${journeyData.collection_address.time_start}`, 'YYYY-MM-DD HH:mm').subtract(2, 'hour').utc()\r\n                                var datetime_end = moment(`${journeyData.destination_address.date_start} ${journeyData.destination_address.time_end}`, 'YYYY-MM-DD HH:mm').utc()\r\n                                if (moment().isBetween(datetime_start, datetime_end)) {\r\n                                    journeyData.peroid = 'current'\r\n                                } else if (moment().isBefore(datetime_start)) {\r\n                                    journeyData.peroid = 'next'\r\n                                } else if (moment().isAfter(datetime_end)) {\r\n                                    journeyData.peroid = 'previous'\r\n                                }\r\n                                journeyData.j_id = jobDataPickUp[j].j_id\r\n                                journeyData.date_today = moment().format('DD/MM/YYYY')\r\n                                journeyData.tracking = await schoolDB.Tracking.find({\r\n                                        order: [\r\n                                            ['track_id', 'DESC']\r\n                                        ],\r\n                                        attributes: ['lat', 'lng', 'timestamp', 'j_id'],\r\n                                        where: {\r\n                                            j_id: {\r\n                                                $eq: jobDataPickUp[j].j_id\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                    // console.log(journeyData)\r\n                                passengerData[i].routeToday.push(journeyData)\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    result.push({\r\n                        school_name: accountData.get().name,\r\n                        passengers: passengerData\r\n                    })\r\n                    schoolDB = null\r\n                }\r\n                return result\r\n            } catch (err) {\r\n                console.log(err)\r\n                return null\r\n            }\r\n\r\n        },\r\n        async schoolContact(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_SCHOOL_CONTACT')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: {\r\n                        email: request.user.email\r\n                    }\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                result.push(accountData.get())\r\n            }\r\n            return result\r\n        },\r\n        async parentContactOptions(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_CONTACT_OPTIONS')) {\r\n                return null\r\n            }\r\n            var database = sequelizeInitial('ecm_share')\r\n            return database.ParentGlobal.find({\r\n                attributes: ['accept_email', 'accept_notification'],\r\n                where: {\r\n                    email: request.user.email\r\n                }\r\n            })\r\n        }\r\n    },\r\n    Mutation: {\r\n        async parentPasswordUpdate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'UPDATE_PASSWORD')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            args.input['password'] = crypto.createHash('md5').update(args.input['password']).digest('hex');\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentUpdate = await shareDB.ParentGlobal.update({ password: args.input['password'] }, { where: { email: args.input['email'], id: request.user.id } })\r\n                return {\r\n                    msg: \"Password has been updated\",\r\n                    status: true\r\n                }\r\n            } catch (err) {\r\n                return {\r\n                    msg: err.message,\r\n                    status: false\r\n                }\r\n            }\r\n        },\r\n        async parentPushTokenCreate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'CREATE_PUSH_TOKEN')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentTokenCreate = await shareDB.ParentToken.create({\r\n                    push_token: args.input['push_token'],\r\n                    parent_id: request.user.id\r\n                })\r\n                return { msg: 'New token has been added', status: true }\r\n            } catch (err) {\r\n                return { msg: err.message, status: false }\r\n            }\r\n        },\r\n        async parentPushTokenDelete(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'DELETE_PUSH_TOKEN')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentTokenDelete = await shareDB.ParentToken.destroy({\r\n                    where: {\r\n                        push_token: args.input['push_token'],\r\n                        parent_id: request.user.id\r\n                    }\r\n                })\r\n                return { msg: 'token has been deleted', status: true }\r\n            } catch (err) {\r\n                return { msg: err.message, status: false }\r\n            }\r\n        },\r\n        async parentUpdateContactOption(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'UPDATE_CONTACT_OPTION')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var updateItem = {}\r\n                updateItem[args.input['key']] = args.input['value']\r\n                var parentContactOptionsUpdate = await shareDB.ParentGlobal.update(updateItem, { where: { id: request.user.id } })\r\n                return { msg: args.input['key'] + ' has been updated', status: true }\r\n            } catch (err) {\r\n                return { msg: err.message, status: false }\r\n            }\r\n        }\r\n    },\r\n    Date: new GraphQLScalarType({\r\n        name: 'Date',\r\n        description: 'Date custom scalar type',\r\n        parseValue(value) {\r\n            return moment(value); // value from the client\r\n        },\r\n        serialize(value) {\r\n            return moment(value).utc().format('DD-MM-YYYY HH:mm:ss'); // value sent to the client\r\n        },\r\n        parseLiteral(ast) {},\r\n    })\r\n}\r\n\r\nexport default resolvers"]}