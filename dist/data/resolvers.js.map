{"version":3,"sources":["../../src/data/resolvers.js"],"names":["crypto","require","jwt","checkPermission","userPermissions","permission","check","filter","item","length","makeJourney","pickUpArr","dropOffArr","response","collection_address","destination_address","extra_address","findMovementData","collection_address_data","destination_address_data","Object","assign","get","time_end","tb_movement_option","date_end","utc","format","address","latlng","add_lat","add_lng","des_lat","des_lng","findExtraRoute","quote_id","movement_order","extra_address_data","map","extra","findPassengerLog","point_id","passenger_id","Promise","resolve","reject","findAll","where","$eq","order","limit","then","passengerLogs","i","find","attributes","movement","collection","destination","movement_start","movement_end","$between","movements","movement_id","include","model","as","catch","err","console","log","message","resolvers","Query","parents","_","args","request","user","query","parent","parentPassenger","passengerRouteToday","required","date_out","account","tb_passenger","status_re","$ne","quote","jobs","jobData","job","jobDataPickUp","pickup","jobDataDropOff","journeys","journeyData","col_passenger_log","des_passenger_log","passenger_log","time_start","datetime_start","date_start","datetime_end","isBetween","peroid","isBefore","isAfter","j_id","date_today","tracking","push","passengerByQuote","jobPassenger","result","forEach","tb_job_passengers","item2","passenger","dropoff","watchTracking","companyContact","main_profile","company","replace","Mutation","parentPasswordUpdate","mutate","msg","status","input","createHash","update","digest","password","email","parent_id","id","parentUpdate","parentPushTokenCreate","create","token","parentTokenCreate","Date","name","description","parseValue","value","serialize","parseLiteral","ast"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAcA;;AACA;;;;AAEA;;;;;;AACA;AACA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AAHA;;AAIA,IAAMC,MAAMD,QAAQ,cAAR,CAAZ;;AAEA,IAAME,kBAAkB,SAAlBA,eAAkB,CAACC,eAAD,EAAkBC,UAAlB,EAAiC;AACrD,QAAIC,QAAQF,gBAAgBG,MAAhB,CAAuB,UAACC,IAAD;AAAA,eAAUA,QAAQH,UAAR,IAAsBG,QAAQ,KAAxC;AAAA,KAAvB,CAAZ;AACA,QAAIF,MAAMG,MAAN,GAAe,CAAnB,EAAsB,OAAO,IAAP,CAAtB,KACK,OAAO,KAAP;AACR,CAJD;;AAMA,IAAMC;AAAA,0EAAc,iBAAMC,SAAN,EAAiBC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,gCADY,GACD;AACXC,gDAAoB,EADT;AAEXC,iDAAqB,EAFV;AAGXC,2CAAe;AAHJ,yBADC;AAAA;AAAA,+BAMoBC,iBAAiBN,UAAU,UAAV,CAAjB,EAAwC,CAAC,YAAD,EAAe,YAAf,EAA6B,oBAA7B,EAAmD,UAAnD,EAA+D,SAA/D,EAA0E,SAA1E,EAAqF,gBAArF,CAAxC,CANpB;;AAAA;AAMZO,+CANY;AAAA;AAAA,+BAOqBD,iBAAiBL,WAAW,UAAX,CAAjB,EAAyC,CAAC,YAAD,EAAe,YAAf,EAA6B,qBAA7B,EAAoD,UAApD,EAAgE,SAAhE,EAA2E,SAA3E,EAAsF,gBAAtF,CAAzC,CAPrB;;AAAA;AAOZO,gDAPY;;AAQhBN,8DACOA,QADP;AAEIC,gDAAoBM,OAAOC,MAAP,CAAc,EAAd,EAAkBH,wBAAwBI,GAAxB,EAAlB,EAAiD;AACjEC,0CAAU,sBAAOL,wBAAwBI,GAAxB,GAA8BE,kBAA9B,CAAiDF,GAAjD,GAAuDG,QAA9D,EAAwEC,GAAxE,GAA8EC,MAA9E,CAAqF,OAArF,CADuD;AAEjEC,yCAASV,wBAAwBI,GAAxB,GAA8BR,kBAF0B;AAGjEe,wCAAQX,wBAAwBI,GAAxB,GAA8BQ,OAA9B,GAAwC,GAAxC,GAA8CZ,wBAAwBI,GAAxB,GAA8BS;AAHnB,6BAAjD;AAFxB;AAQAlB,8DACOA,QADP;AAEIE,iDAAqBK,OAAOC,MAAP,CAAc,EAAd,EAAkBF,yBAAyBG,GAAzB,EAAlB,EAAkD;AACnEC,0CAAU,sBAAOJ,yBAAyBG,GAAzB,GAA+BE,kBAA/B,CAAkDF,GAAlD,GAAwDG,QAA/D,EAAyEC,GAAzE,GAA+EC,MAA/E,CAAsF,OAAtF,CADyD;AAEnEC,yCAAST,yBAAyBG,GAAzB,GAA+BP,mBAF2B;AAGnEc,wCAAQV,yBAAyBG,GAAzB,GAA+BU,OAA/B,GAAyC,GAAzC,GAA+Cb,yBAAyBG,GAAzB,GAA+BW;AAHnB,6BAAlD;AAFzB;AAhBgB;AAAA,+BAwBeC,eAAevB,UAAUwB,QAAzB,EAC3BjB,wBAAwBI,GAAxB,GAA8Bc,cADH,EAE3BjB,yBAAyBG,GAAzB,GAA+Bc,cAFJ,CAxBf;;AAAA;AAwBZC,0CAxBY;;AA2BhBxB,iCAASG,aAAT,GAAyBqB,mBACpB9B,MADoB,CACb,UAACC,IAAD;AAAA,mCAAWA,KAAKc,GAAL,GAAWc,cAAX,GAA4BlB,wBAAwBI,GAAxB,GAA8Bc,cAArE;AAAA,yBADa,EAEpBE,GAFoB,CAEhB,UAACC,KAAD,EAAW;AACZ,mCAAO;AACHH,gDAAgBG,MAAMjB,GAAN,GAAYc,cADzB;AAEHP,wCAAQU,MAAMjB,GAAN,GAAYQ,OAAZ,GAAsB,GAAtB,GAA4BS,MAAMjB,GAAN,GAAYS;AAF7C,6BAAP;AAIH,yBAPoB,CAAzB;AA3BgB,yDAmCTlB,QAnCS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAsCA,IAAM2B,mBAAmB,SAAnBA,gBAAmB,QAA0C;AAAA,QAAvCC,QAAuC,SAAvCA,QAAuC;AAAA,QAA7BC,YAA6B,SAA7BA,YAA6B;AAAA,QAAfP,QAAe,SAAfA,QAAe;;AAC/D,WAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAaC,OAAb,CAAqB;AACbC,mBAAO;AACHN,0BAAU;AACNO,yBAAKP;AADC,iBADP;AAIHC,8BAAc;AACVM,yBAAKN;AADK,iBAJX;AAOHP,0BAAU;AACNa,yBAAKb;AADC;AAPP,aADM;AAYbc,mBAAO,CACH,CAAC,QAAD,EAAW,MAAX,CADG,CAZM;AAebC,mBAAO;AAfM,SAArB,EAiBKC,IAjBL;AAAA,mFAiBU,kBAAMC,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACEA,iBAAiB,IADnB;AAAA;AAAA;AAAA;;AACyBR,wCAAQ,IAAR;AADzB;AAAA;;AAAA;AAGWS,iCAHX,GAGe,CAHf;;AAAA;AAAA,sCAGkBA,IAAID,cAAc3C,MAHpC;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAK2B,oBAAS6C,IAAT,CAAc;AAC3BP,2CAAO;AACHX,wDAAgBgB,cAAcC,CAAd,EAAiB/B,GAAjB,GAAuBc,cADpC;AAEHD,kDAAUA;AAFP,qCADoB;AAK3BoB,gDAAY,CAAC,oBAAD,EAAuB,qBAAvB;AALe,iCAAd,CAL3B;;AAAA;AAKUC,wCALV;;AAYU;AACJJ,8CAAcC,CAAd,EAAiBzB,OAAjB,GAA2B;AACvB6B,gDAAYD,SAASlC,GAAT,GAAeR,kBADJ;AAEvB4C,iDAAaF,SAASlC,GAAT,GAAeP;AAFL,iCAA3B;;AAbN;AAG4CsC,mCAH5C;AAAA;AAAA;;AAAA;AAkBET,wCAAQQ,aAAR;;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjBV;;AAAA;AAAA;AAAA;AAAA;AAsCH,KAvCM,CAAP;AAwCH,CAzCD;;AA2CA,IAAMlB,iBAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAWwB,cAAX,EAA2BC,YAA3B,EAA4C;AAC/D,WAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,4BAASC,OAAT,CAAiB;AACTS,wBAAY,CAAC,gBAAD,EAAmB,SAAnB,EAA8B,SAA9B,CADH;AAETR,mBAAO;AACHZ,0BAAU;AACNa,yBAAKb;AADC,iBADP;AAIHC,gCAAgB;AACZyB,8BAAU,CAACF,cAAD,EAAiBC,YAAjB;AADE;AAJb;AAFE,SAAjB,EAWKT,IAXL,CAWU,UAACW,SAAD,EAAe;AACjBlB,oBAAQkB,SAAR;AACH,SAbL;AAcH,KAfM,CAAP;AAgBH,CAjBD;;AAmBA,IAAM7C,mBAAmB,SAAnBA,gBAAmB,CAAC8C,WAAD,EAAcR,UAAd,EAA6B;AAClD,WAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,4BAASS,IAAT,CAAc;AACNC,wBAAYA,UADN;AAENS,qBAAS,CAAC;AACNC,iDADM;AAENC,oBAAI,oBAFE;AAGNX,4BAAY,CAAC,UAAD;AAHN,aAAD,CAFH;AAONR,mBAAO;AACHgB,6BAAa;AACTf,yBAAKe;AADI;AADV;AAPD,SAAd,EAaKZ,IAbL,CAaU,UAACK,QAAD,EAAc;AAChBZ,oBAAQY,QAAR;AACH,SAfL,EAgBKW,KAhBL,CAgBW,UAACC,GAAD;AAAA,mBAASC,QAAQC,GAAR,CAAYF,IAAIG,OAAhB,CAAT;AAAA,SAhBX;AAiBH,KAnBM,CAAP;AAoBH,CArBD;;AAuBA,IAAMC,YAAY;AACdC,WAAO;AACHC,eADG,mBACKC,CADL,EACQC,IADR,EACcC,OADd,EACuB;AACtB,gBAAI,CAAC1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,gBAApC,CAAL,EAA4D;AACxD,uBAAO,IAAP;AACH;AACD,mBAAO,kBAAOjC,OAAP,EAAP;AACH,SANE;AAOHkC,cAPG,kBAOIL,CAPJ,EAOOC,IAPP,EAOaC,OAPb,EAOsB;AACrB,gBAAI,CAAC1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,eAApC,CAAL,EAA2D;AACvD,uBAAO,IAAP;AACH;AACD,mBAAO,kBAAOzB,IAAP,CAAY,EAAEP,OAAO6B,IAAT,EAAZ,CAAP;AACH,SAZE;AAaHK,uBAbG,2BAaaN,CAbb,EAagBC,IAbhB,EAasBC,OAbtB,EAa+B;AAC9B,gBAAI,CAAC1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,yBAApC,CAAL,EAAqE;AACjE,uBAAO,IAAP;AACH;AACD;AACA,mBAAO,sBAAWjC,OAAX,CAAmB;AACtBkB,yBAAS,CAAC;AACNC,qDADM;AAENlB,2BAAO6B;AAFD,iBAAD;AADa,aAAnB,CAAP;AAMH,SAxBE;AAyBGM,2BAzBH,+BAyBuBP,CAzBvB,EAyB0BC,IAzB1B,EAyBgCC,OAzBhC,EAyByC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCACnC1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,8BAApC,CADmC;AAAA;AAAA;AAAA;;AAAA,kEAE7B,IAF6B;;AAAA;AAAA;AAAA,uCAIZ,2BAAgBzB,IAAhB,CAAqB;AAC7CC,gDAAY,EADiC;AAE7CS,6CAAS,CAAC;AACNC,oEADM;AAENlB,+CAAO;AACHL,0DAAckC,KAAK,cAAL;AADX,yCAFD;AAKNrB,oDAAY,CAAC,SAAD;AALN,qCAAD;AAFoC,iCAArB,CAJY;;AAAA;AAIpC0B,+CAJoC;;AAAA,sCAcpCA,mBAAmB,IAdiB;AAAA;AAAA;AAAA;;AAAA,kEAcJ,IAdI;;AAAA;AAAA;AAAA,uCAgBtB,iBAAM3B,IAAN,CAAW;AACzBC,gDAAY,CAAC,UAAD,CADa;AAEzBS,6CAAS,CAAC;AACNT,oDAAY,EADN;AAENU,uEAFM;AAGNkB,kDAAU;AAHJ,qCAAD,CAFgB;AAOzBpC,2CAAO;AACHqC,kDAAU;AACNvB,sDAAU,CAAC,wBAASlC,MAAT,CAAgB,YAAhB,IAAgC,WAAjC,EAA8C,wBAASA,MAAT,CAAgB,YAAhB,IAAgC,WAA9E;AADJ,yCADP;AAIH0D,iDAAS;AACLrC,iDAAKiC,gBAAgB3D,GAAhB,GAAsBgE,YAAtB,CAAmChE,GAAnC,GAAyC+D;AADzC,yCAJN;AAOHE,mDAAW;AACPC,iDAAK;AADE;AAPR;AAPkB,iCAAX,CAhBsB;;AAAA;AAgBpCC,qCAhBoC;;AAAA,sCAmCpCA,SAAS,IAnC2B;AAAA;AAAA;AAAA;;AAAA,kEAmCd,IAnCc;;AAAA;AAAA;AAAA,uCAqCvB,yBAAc3C,OAAd,CAAsB;AACnCS,gDAAY,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,EAAmC,cAAnC,EAAmD,MAAnD,CADuB;AAEnCR,2CAAO;AACHZ,kDAAU;AACNa,iDAAKyC,MAAMnE,GAAN,GAAYa;AADX,yCADP;AAIHO,sDAAckC,KAAK,cAAL;AAJX;AAF4B,iCAAtB,CArCuB;;AAAA;AAqCpCc,oCArCoC;;AAAA,sCA8CpCA,QAAQ,IA9C4B;AAAA;AAAA;AAAA;;AAAA,kEA8Cf,IA9Ce;;AAAA;AAgDpCC,uCAhDoC,GAgD1BD,KAAKpD,GAAL,CAAS,UAACsD,GAAD;AAAA,2CAASA,IAAItE,GAAJ,EAAT;AAAA,iCAAT,CAhD0B;AAiDpCuE,6CAjDoC,GAiDpBF,QAAQpF,MAAR,CAAe,UAACqF,GAAD;AAAA,2CAASA,IAAIE,MAAJ,IAAc,CAAvB;AAAA,iCAAf,CAjDoB;AAkDpCC,8CAlDoC,GAkDnBJ,QAAQpF,MAAR,CAAe,UAACqF,GAAD;AAAA,2CAASA,IAAIE,MAAJ,IAAc,CAAvB;AAAA,iCAAf,CAlDmB;AAmDpCE,wCAnDoC,GAmDzB,EAnDyB;;AAAA,sCAoDpCH,cAAcpF,MAAd,GAAuB,CAAvB,IAA4BsF,eAAetF,MAAf,GAAwB,CApDhB;AAAA;AAAA;AAAA;;AAqD3B4C,iCArD2B,GAqDvB,CArDuB;;AAAA;AAAA,sCAqDpBA,IAAIwC,cAAcpF,MArDE;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAsDRC,YAAYmF,cAAcxC,CAAd,CAAZ,EAA8B0C,eAAe1C,CAAf,CAA9B,CAtDQ;;AAAA;AAsD5B4C,2CAtD4B;AAAA;AAAA,uCAuDFzD,iBAAiBqD,cAAcxC,CAAd,CAAjB,CAvDE;;AAAA;AAuD5B6C,iDAvD4B;AAAA;AAAA,uCAwDF1D,iBAAiBuD,eAAe1C,CAAf,CAAjB,CAxDE;;AAAA;AAwD5B8C,iDAxD4B;;AAyDhCF,4CAAYnF,kBAAZ,CAA+BsF,aAA/B,GAAgDF,kBAAkBzF,MAAlB,GAA2B,CAA5B,GAAiCyF,kBAAkB5D,GAAlB,CAAsB,UAAC9B,IAAD;AAAA,2CAAUA,KAAKc,GAAL,EAAV;AAAA,iCAAtB,CAAjC,GAA+E,EAA9H;AACA2E,4CAAYlF,mBAAZ,CAAgCqF,aAAhC,GAAiDD,iBAAD,GAAsBA,kBAAkB7D,GAAlB,CAAsB,UAAC9B,IAAD;AAAA,2CAAUA,KAAKc,GAAL,EAAV;AAAA,iCAAtB,CAAtB,GAAoE,EAApH;AACA2E,4CAAYnF,kBAAZ,CAA+BuF,UAA/B,GAA4C,sBAAOJ,YAAYnF,kBAAZ,CAA+BuF,UAAtC,EAAkD,UAAlD,EAA8D1E,MAA9D,CAAqE,OAArE,CAA5C;AACI2E,8CA5D4B,GA4DX,sBAAUL,YAAYnF,kBAAZ,CAA+ByF,UAAzC,SAAuDN,YAAYnF,kBAAZ,CAA+BuF,UAAtF,EAAoG,kBAApG,EAAwH3E,GAAxH,EA5DW;AA6D5B8E,4CA7D4B,GA6Db,sBAAUP,YAAYlF,mBAAZ,CAAgCwF,UAA1C,SAAwDN,YAAYlF,mBAAZ,CAAgCQ,QAAxF,EAAoG,kBAApG,EAAwHG,GAAxH,EA7Da;;AA8DhC,oCAAI,wBAAS+E,SAAT,CAAmBH,cAAnB,EAAmCE,YAAnC,CAAJ,EAAsD;AAClDP,gDAAYS,MAAZ,GAAqB,SAArB;AACH,iCAFD,MAEO,IAAI,wBAASC,QAAT,CAAkBL,cAAlB,CAAJ,EAAuC;AAC1CL,gDAAYS,MAAZ,GAAqB,MAArB;AACH,iCAFM,MAEA,IAAI,wBAASE,OAAT,CAAiBJ,YAAjB,CAAJ,EAAoC;AACvCP,gDAAYS,MAAZ,GAAqB,UAArB;AACH;AACDT,4CAAYY,IAAZ,GAAmBhB,cAAcxC,CAAd,EAAiBwD,IAApC;AACAZ,4CAAYa,UAAZ,GAAyB,wBAASnF,MAAT,CAAgB,YAAhB,CAAzB;AAtEgC;AAAA,uCAuEH,oBAAS2B,IAAT,CAAc;AACvCL,2CAAO,CACH,CAAC,UAAD,EAAa,MAAb,CADG,CADgC;AAIvCM,gDAAY,CAAC,KAAD,EAAQ,KAAR,EAAe,WAAf,EAA4B,MAA5B,CAJ2B;AAKvCR,2CAAO;AACH8D,8CAAM;AACF7D,iDAAK6C,cAAcxC,CAAd,EAAiBwD;AADpB;AADH;AALgC,iCAAd,CAvEG;;AAAA;AAuEhCZ,4CAAYc,QAvEoB;;AAkFhCf,yCAASgB,IAAT,CAAcf,WAAd;;AAlFgC;AAqDM5C,mCArDN;AAAA;AAAA;;AAAA;AAAA,kEAoF7B2C,QApF6B;;AAAA;AAAA,kEAsF7B,IAtF6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwF3C,SAjHE;AAkHGiB,wBAlHH,4BAkHoBtC,CAlHpB,EAkHuBC,IAlHvB,EAkH6BC,OAlH7B,EAkHsC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAChC1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,2BAApC,CADgC;AAAA;AAAA;AAAA;;AAAA,kEAE1B,IAF0B;;AAAA;AAAA;AAAA,uCAIZ,oBAASjC,OAAT,CAAiB;AACtCC,2CAAO6B,IAD+B;AAEtCrB,gDAAY,CAAC,oBAAD,EAAuB,qBAAvB,EAA8C,aAA9C,CAF0B;AAGtCS,6CAAS,CAAC;AACNC,uEADM;AAENV,oDAAY,CAAC,cAAD,EAAiB,QAAjB,CAFN;AAGNS,iDAAS,CAAC;AACNC,wEADM;AAENV,wDAAY,CAAC,YAAD;AAFN,yCAAD;AAHH,qCAAD,CAH6B;AAWtCN,2CAAO,CACH,CAAC,aAAD,EAAgB,KAAhB,CADG;AAX+B,iCAAjB,CAJY;;AAAA;AAIjCiE,4CAJiC;AAmBjCC,sCAnBiC,GAmBxB,EAnBwB;;AAoBrCD,6CAAaE,OAAb,CAAqB,UAAC5G,IAAD,EAAU;AAC3B2G,2CAAOH,IAAP,CAAY;AACRjD,qDAAavD,KAAKc,GAAL,GAAWyC,WADhB;AAERN,oDAAYjD,KAAKc,GAAL,GAAWR,kBAFf;AAGR4C,qDAAalD,KAAKc,GAAL,GAAWP,mBAHhB;AAIR+E,gDAAQtF,KAAKc,GAAL,GAAW+F,iBAAX,CAA6B9G,MAA7B,CAAoC,UAACqF,GAAD;AAAA,mDAASA,IAAIE,MAAJ,IAAc,CAAvB;AAAA,yCAApC,EAA8DxD,GAA9D,CAAkE,UAACgF,KAAD,EAAW;AACjFA,kDAAMC,SAAN,GAAkBD,MAAMhG,GAAN,GAAYgE,YAAZ,CAAyBhE,GAAzB,EAAlB;AACA,mDAAOgG,KAAP;AACH,yCAHO,CAJA;AAQRE,iDAAShH,KAAKc,GAAL,GAAW+F,iBAAX,CAA6B9G,MAA7B,CAAoC,UAACqF,GAAD;AAAA,mDAASA,IAAIE,MAAJ,IAAc,CAAvB;AAAA,yCAApC,EAA8DxD,GAA9D,CAAkE,UAACgF,KAAD,EAAW;AAClFA,kDAAMC,SAAN,GAAkBD,MAAMhG,GAAN,GAAYgE,YAAZ,CAAyBhE,GAAzB,EAAlB;AACA,mDAAOgG,KAAP;AACH,yCAHQ;AARD,qCAAZ;AAaH,iCAdD;AApBqC,kEAmC9BH,MAnC8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCxC,SAtJE;AAuJGM,qBAvJH,yBAuJiB9C,CAvJjB,EAuJoBC,IAvJpB,EAuJ0BC,OAvJ1B,EAuJmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC7B1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,uBAApC,CAD6B;AAAA;AAAA;AAAA;;AAAA,kEAEvB,IAFuB;;AAAA;AAAA;AAAA,uCAIb,oBAASzB,IAAT,CAAc;AAC/BL,2CAAO,CACH,CAAC,UAAD,EAAa,MAAb,CADG,CADwB;AAI/BM,gDAAY,CAAC,KAAD,EAAQ,KAAR,EAAe,WAAf,EAA4B,MAA5B,CAJmB;AAK/BR,2CAAO6B;AALwB,iCAAd,CAJa;;AAAA;AAI9BmC,wCAJ8B;AAAA,kEAW3BA,QAX2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYrC,SAnKE;AAoKGW,sBApKH,0BAoKkB/C,CApKlB,EAoKqBC,IApKrB,EAoK2BC,OApK3B,EAoKoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC9B1E,gBAAgB0E,QAAQC,IAAR,CAAaC,KAA7B,EAAoC,qBAApC,CAD8B;AAAA;AAAA;AAAA;;AAAA,kEAExB,IAFwB;;AAAA;AAAA;AAAA,uCAIf,mBAAQzB,IAAR,CAAa;AAC7BP,2CAAO;AACH4E,sDAAc;AACV3E,iDAAK;AADK;AADX;AADsB,iCAAb,CAJe;;AAAA;AAI/B4E,uCAJ+B;;AAWnCA,wCAAQhG,OAAR,GAAkBgG,QAAQhG,OAAR,CAAgBiG,OAAhB,CAAwB,cAAxB,EAAwC,GAAxC,CAAlB;AAXmC,kEAY5BD,OAZ4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAatC;AAjLE,KADO;AAoLdE,cAAU;AACAC,4BADA,gCACqBpD,CADrB,EACwBC,IADxB,EAC8BC,OAD9B,EACuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCACpC1E,gBAAgB0E,QAAQC,IAAR,CAAakD,MAA7B,EAAqC,iBAArC,CADoC;AAAA;AAAA;AAAA;;AAAA,kEAE9B;AACHC,yCAAK,oCADF;AAEHC,4CAAQ;AAFL,iCAF8B;;AAAA;AAOzCtD,qCAAKuD,KAAL,CAAW,UAAX,IAAyBnI,OAAOoI,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCzD,KAAKuD,KAAL,CAAW,UAAX,CAAhC,EAAwDG,MAAxD,CAA+D,KAA/D,CAAzB;AAPyC;AAAA;AAAA,uCASZ,kBAAOD,MAAP,CAAc,EAAEE,UAAU3D,KAAKuD,KAAL,CAAW,UAAX,CAAZ,EAAd,EAAoD,EAAEpF,OAAO,EAAEyF,OAAO5D,KAAKuD,KAAL,CAAW,OAAX,CAAT,EAA8BM,WAAW5D,QAAQC,IAAR,CAAa4D,EAAtD,EAAT,EAApD,CATY;;AAAA;AASjCC,4CATiC;AAAA,kEAU9B;AACHV,yCAAK,2BADF;AAEHC,4CAAQ;AAFL,iCAV8B;;AAAA;AAAA;AAAA;AAAA,kEAe9B;AACHD,yCAAK,aAAI1D,OADN;AAEH2D,4CAAQ;AAFL,iCAf8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB5C,SArBK;AAsBAU,6BAtBA,iCAsBsBjE,CAtBtB,EAsByBC,IAtBzB,EAsB+BC,OAtB/B,EAsBwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCACrC1E,gBAAgB0E,QAAQC,IAAR,CAAakD,MAA7B,EAAqC,mBAArC,CADqC;AAAA;AAAA;AAAA;;AAAA,kEAE/B;AACHC,yCAAK,oCADF;AAEHC,4CAAQ;AAFL,iCAF+B;;AAAA;AAAA;AAAA,uCAOvB,kBAAO5E,IAAP,CAAY;AAC3BP,2CAAO;AACHyF,+CAAO5D,KAAKuD,KAAL,CAAW,OAAX;AADJ;AADoB,iCAAZ,CAPuB;;AAAA;AAOtCnD,sCAPsC;;AAAA,sCAYtCA,UAAU,IAZ4B;AAAA;AAAA;AAAA;;AAAA,kEAYf,EAAEiD,KAAK,wBAAP,EAAiCC,QAAQ,KAAzC,EAZe;;AAAA;AAAA;AAAA;AAAA,uCAcR,uBAAYW,MAAZ,CAAmB;AAC7CJ,+CAAWzD,OAAO1D,GAAP,GAAamH,SADqB;AAE7CK,2CAAOlE,KAAKuD,KAAL,CAAW,YAAX;AAFsC,iCAAnB,CAdQ;;AAAA;AAclCY,iDAdkC;AAAA,kEAkB/B,EAAEd,KAAK,0BAAP,EAAmCC,QAAQ,IAA3C,EAlB+B;;AAAA;AAAA;AAAA;AAAA,kEAoB/B,EAAED,KAAK,aAAI1D,OAAX,EAAoB2D,QAAQ,KAA5B,EApB+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsB7C;AA5CK,KApLI;AAkOdc,UAAM,+BAAsB;AACxBC,cAAM,MADkB;AAExBC,qBAAa,yBAFW;AAGxBC,kBAHwB,sBAGbC,KAHa,EAGN;AACd,mBAAO,sBAAOA,KAAP,CAAP,CADc,CACQ;AACzB,SALuB;AAMxBC,iBANwB,qBAMdD,KANc,EAMP;AACb,mBAAO,sBAAOA,KAAP,EAAc1H,GAAd,GAAoBC,MAApB,CAA2B,qBAA3B,CAAP,CADa,CAC6C;AAC7D,SARuB;AASxB2H,oBATwB,wBASXC,GATW,EASN,CAAE;AATI,KAAtB;AAlOQ,CAAlB;;kBA+Oe/E,S","file":"resolvers.js","sourcesContent":["import {\r\n    Parent,\r\n    ParentPassenger,\r\n    Passengers,\r\n    JobPassengers,\r\n    Quote,\r\n    Movement,\r\n    PassengerLog,\r\n    Tracking,\r\n    ParentToken,\r\n    Company,\r\n    /*Journey,*/\r\n    MovementOptions\r\n} from './connector'\r\nimport { GraphQLScalarType } from 'graphql';\r\nimport config from '../config';\r\n// import { Kind } from 'graphql/language';\r\nimport moment from 'moment';\r\n// import Sequelize from 'sequelize'\r\nconst crypto = require('crypto');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst checkPermission = (userPermissions, permission) => {\r\n    var check = userPermissions.filter((item) => item == permission || item == 'ALL')\r\n    if (check.length > 0) return true\r\n    else return false\r\n}\r\n\r\nconst makeJourney = async(pickUpArr, dropOffArr) => {\r\n    var response = {\r\n        collection_address: {},\r\n        destination_address: {},\r\n        extra_address: []\r\n    }\r\n    var collection_address_data = await findMovementData(pickUpArr['point_id'], ['date_start', 'time_start', 'collection_address', 'progress', 'add_lat', 'add_lng', 'movement_order'])\r\n    var destination_address_data = await findMovementData(dropOffArr['point_id'], ['date_start', 'time_start', 'destination_address', 'progress', 'des_lat', 'des_lng', 'movement_order'])\r\n    response = {\r\n        ...response,\r\n        collection_address: Object.assign({}, collection_address_data.get(), {\r\n            time_end: moment(collection_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: collection_address_data.get().collection_address,\r\n            latlng: collection_address_data.get().add_lat + ',' + collection_address_data.get().add_lng\r\n        })\r\n    }\r\n    response = {\r\n        ...response,\r\n        destination_address: Object.assign({}, destination_address_data.get(), {\r\n            time_end: moment(destination_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: destination_address_data.get().destination_address,\r\n            latlng: destination_address_data.get().des_lat + ',' + destination_address_data.get().des_lng\r\n        })\r\n    }\r\n    var extra_address_data = await findExtraRoute(pickUpArr.quote_id,\r\n        collection_address_data.get().movement_order,\r\n        destination_address_data.get().movement_order)\r\n    response.extra_address = extra_address_data\r\n        .filter((item) => (item.get().movement_order > collection_address_data.get().movement_order))\r\n        .map((extra) => {\r\n            return {\r\n                movement_order: extra.get().movement_order,\r\n                latlng: extra.get().add_lat + ',' + extra.get().add_lng\r\n            }\r\n        })\r\n    return response\r\n}\r\n\r\nconst findPassengerLog = ({ point_id, passenger_id, quote_id }) => {\r\n    return new Promise((resolve, reject) => {\r\n        PassengerLog.findAll({\r\n                where: {\r\n                    point_id: {\r\n                        $eq: point_id\r\n                    },\r\n                    passenger_id: {\r\n                        $eq: passenger_id\r\n                    },\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    }\r\n                },\r\n                order: [\r\n                    ['log_id', 'DESC']\r\n                ],\r\n                limit: 1\r\n            })\r\n            .then(async(passengerLogs) => {\r\n                if (passengerLogs == null) resolve(null)\r\n                else {\r\n                    for (let i = 0; i < passengerLogs.length; i++) {\r\n                        // console.log(passengerLogs[i])\r\n                        var movement = await Movement.find({\r\n                                where: {\r\n                                    movement_order: passengerLogs[i].get().movement_order,\r\n                                    quote_id: quote_id\r\n                                },\r\n                                attributes: ['collection_address', 'destination_address']\r\n                            })\r\n                            // console.log(movement)\r\n                        passengerLogs[i].address = {\r\n                            collection: movement.get().collection_address,\r\n                            destination: movement.get().destination_address\r\n                        }\r\n                    }\r\n                    resolve(passengerLogs)\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nconst findExtraRoute = (quote_id, movement_start, movement_end) => {\r\n    return new Promise((resolve, reject) => {\r\n        Movement.findAll({\r\n                attributes: ['movement_order', 'add_lat', 'add_lng'],\r\n                where: {\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    },\r\n                    movement_order: {\r\n                        $between: [movement_start, movement_end]\r\n                    }\r\n                }\r\n            })\r\n            .then((movements) => {\r\n                resolve(movements)\r\n            })\r\n    })\r\n}\r\n\r\nconst findMovementData = (movement_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        // console.log(movement_id)\r\n        Movement.find({\r\n                attributes: attributes,\r\n                include: [{\r\n                    model: MovementOptions,\r\n                    as: 'tb_movement_option',\r\n                    attributes: ['date_end']\r\n                }],\r\n                where: {\r\n                    movement_id: {\r\n                        $eq: movement_id\r\n                    }\r\n                }\r\n            })\r\n            .then((movement) => {\r\n                resolve(movement)\r\n            })\r\n            .catch((err) => console.log(err.message))\r\n    })\r\n}\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        parents(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENTS')) {\r\n                return null\r\n            }\r\n            return Parent.findAll()\r\n        },\r\n        parent(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT')) {\r\n                return null\r\n            }\r\n            return Parent.find({ where: args })\r\n        },\r\n        parentPassenger(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_PASSENGER')) {\r\n                return null\r\n            }\r\n            // return ParentPassenger.find({ where: args })\r\n            return Passengers.findAll({\r\n                include: [{\r\n                    model: ParentPassenger,\r\n                    where: args\r\n                }]\r\n            })\r\n        },\r\n        async passengerRouteToday(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PASSENGER_ROUTE_TODAY')) {\r\n                return null\r\n            }\r\n            var parentPassenger = await ParentPassenger.find({\r\n                attributes: [],\r\n                include: [{\r\n                    model: Passengers,\r\n                    where: {\r\n                        passenger_id: args['passenger_id']\r\n                    },\r\n                    attributes: ['account']\r\n                }]\r\n            })\r\n            if (parentPassenger == null) return null\r\n\r\n            var quote = await Quote.find({\r\n                attributes: ['quote_id'],\r\n                include: [{\r\n                    attributes: [],\r\n                    model: JobPassengers,\r\n                    required: true\r\n                }],\r\n                where: {\r\n                    date_out: {\r\n                        $between: [moment().format('YYYY-MM-DD') + ' 00:00:00', moment().format('YYYY-MM-DD') + ' 23:59:59']\r\n                    },\r\n                    account: {\r\n                        $eq: parentPassenger.get().tb_passenger.get().account\r\n                    },\r\n                    status_re: {\r\n                        $ne: 'E'\r\n                    }\r\n                },\r\n            })\r\n            if (quote == null) return null\r\n\r\n            var jobs = await JobPassengers.findAll({\r\n                attributes: ['quote_id', 'point_id', 'pickup', 'passenger_id', 'j_id'],\r\n                where: {\r\n                    quote_id: {\r\n                        $eq: quote.get().quote_id\r\n                    },\r\n                    passenger_id: args['passenger_id']\r\n                }\r\n            })\r\n            if (jobs == null) return null\r\n\r\n            var jobData = jobs.map((job) => job.get())\r\n            var jobDataPickUp = jobData.filter((job) => job.pickup == 1)\r\n            var jobDataDropOff = jobData.filter((job) => job.pickup == 0)\r\n            var journeys = []\r\n            if (jobDataPickUp.length > 0 && jobDataDropOff.length > 0) {\r\n                for (let i = 0; i < jobDataPickUp.length; i++) {\r\n                    var journeyData = await makeJourney(jobDataPickUp[i], jobDataDropOff[i])\r\n                    var col_passenger_log = await findPassengerLog(jobDataPickUp[i])\r\n                    var des_passenger_log = await findPassengerLog(jobDataDropOff[i])\r\n                    journeyData.collection_address.passenger_log = (col_passenger_log.length > 0) ? col_passenger_log.map((item) => item.get()) : []\r\n                    journeyData.destination_address.passenger_log = (des_passenger_log) ? des_passenger_log.map((item) => item.get()) : []\r\n                    journeyData.collection_address.time_start = moment(journeyData.collection_address.time_start, 'HH:mm:ss').format('HH:mm')\r\n                    var datetime_start = moment(`${journeyData.collection_address.date_start} ${journeyData.collection_address.time_start}`, 'YYYY-MM-DD HH:mm').utc()\r\n                    var datetime_end = moment(`${journeyData.destination_address.date_start} ${journeyData.destination_address.time_end}`, 'YYYY-MM-DD HH:mm').utc()\r\n                    if (moment().isBetween(datetime_start, datetime_end)) {\r\n                        journeyData.peroid = 'current'\r\n                    } else if (moment().isBefore(datetime_start)) {\r\n                        journeyData.peroid = 'next'\r\n                    } else if (moment().isAfter(datetime_end)) {\r\n                        journeyData.peroid = 'previous'\r\n                    }\r\n                    journeyData.j_id = jobDataPickUp[i].j_id\r\n                    journeyData.date_today = moment().format('DD/MM/YYYY')\r\n                    journeyData.tracking = await Tracking.find({\r\n                        order: [\r\n                            ['track_id', 'DESC']\r\n                        ],\r\n                        attributes: ['lat', 'lng', 'timestamp', 'j_id'],\r\n                        where: {\r\n                            j_id: {\r\n                                $eq: jobDataPickUp[i].j_id\r\n                            }\r\n                        }\r\n                    })\r\n                    journeys.push(journeyData)\r\n                }\r\n                return journeys\r\n            } else {\r\n                return null\r\n            }\r\n        },\r\n        async passengerByQuote(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PASSENGER_BY_QUOTE')) {\r\n                return null\r\n            }\r\n            var jobPassenger = await Movement.findAll({\r\n                where: args,\r\n                attributes: ['collection_address', 'destination_address', 'movement_id'],\r\n                include: [{\r\n                    model: JobPassengers,\r\n                    attributes: ['passenger_id', 'pickup'],\r\n                    include: [{\r\n                        model: Passengers,\r\n                        attributes: ['first_name']\r\n                    }]\r\n                }],\r\n                order: [\r\n                    ['movement_id', 'ASC']\r\n                ]\r\n            })\r\n            var result = []\r\n            jobPassenger.forEach((item) => {\r\n                result.push({\r\n                    movement_id: item.get().movement_id,\r\n                    collection: item.get().collection_address,\r\n                    destination: item.get().destination_address,\r\n                    pickup: item.get().tb_job_passengers.filter((job) => job.pickup == 1).map((item2) => {\r\n                        item2.passenger = item2.get().tb_passenger.get()\r\n                        return item2\r\n                    }),\r\n                    dropoff: item.get().tb_job_passengers.filter((job) => job.pickup == 0).map((item2) => {\r\n                        item2.passenger = item2.get().tb_passenger.get()\r\n                        return item2\r\n                    })\r\n                })\r\n            })\r\n            return result\r\n        },\r\n        async watchTracking(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_WATCH_TRACKING')) {\r\n                return null\r\n            }\r\n            var tracking = await Tracking.find({\r\n                order: [\r\n                    ['track_id', 'DESC']\r\n                ],\r\n                attributes: ['lat', 'lng', 'timestamp', 'j_id'],\r\n                where: args\r\n            })\r\n            return tracking\r\n        },\r\n        async companyContact(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_COMPANY_DATA')) {\r\n                return null\r\n            }\r\n            var company = await Company.find({\r\n                where: {\r\n                    main_profile: {\r\n                        $eq: 1\r\n                    }\r\n                }\r\n            })\r\n            company.address = company.address.replace(/(?:\\\\[rn])+/g, \" \")\r\n            return company\r\n        }\r\n    },\r\n    Mutation: {\r\n        async parentPasswordUpdate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'UPDATE_PASSWORD')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            args.input['password'] = crypto.createHash('md5').update(args.input['password']).digest('hex');\r\n            try {\r\n                var parentUpdate = await Parent.update({ password: args.input['password'] }, { where: { email: args.input['email'], parent_id: request.user.id } })\r\n                return {\r\n                    msg: \"Password has been updated\",\r\n                    status: true\r\n                }\r\n            } catch (err) {\r\n                return {\r\n                    msg: err.message,\r\n                    status: false\r\n                }\r\n            }\r\n        },\r\n        async parentPushTokenCreate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'CREATE_PUSH_TOKEN')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            var parent = await Parent.find({\r\n                where: {\r\n                    email: args.input['email']\r\n                }\r\n            })\r\n            if (parent == null) return { msg: 'Not found parent data.', status: false }\r\n            try {\r\n                var parentTokenCreate = await ParentToken.create({\r\n                    parent_id: parent.get().parent_id,\r\n                    token: args.input['push_token']\r\n                })\r\n                return { msg: 'New token has been added', status: true }\r\n            } catch (err) {\r\n                return { msg: err.message, status: false }\r\n            }\r\n        }\r\n    },\r\n    Date: new GraphQLScalarType({\r\n        name: 'Date',\r\n        description: 'Date custom scalar type',\r\n        parseValue(value) {\r\n            return moment(value); // value from the client\r\n        },\r\n        serialize(value) {\r\n            return moment(value).utc().format('DD-MM-YYYY HH:mm:ss'); // value sent to the client\r\n        },\r\n        parseLiteral(ast) {},\r\n    })\r\n}\r\n\r\nexport default resolvers"]}