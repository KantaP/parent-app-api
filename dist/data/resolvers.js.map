{"version":3,"sources":["../../src/data/resolvers.js"],"names":["crypto","require","jwt","checkPermission","userPermissions","permission","check","filter","item","length","globalDB","makeJourney","pickUpArr","dropOffArr","response","collection_address","destination_address","extra_address","findMovementData","collection_address_data","destination_address_data","Object","assign","get","time_end","tb_movement_option","date_end","utc","format","address","latlng","add_lat","add_lng","des_lat","des_lng","findExtraRoute","quote_id","movement_order","extra_address_data","map","extra","findPassengerLog","point_id","passenger_id","pickup","Promise","resolve","reject","JobPassengers","findAll","where","$eq","limit","then","jobPassenger","type_code","jobPassengerItem","action_point_id","status","passengerLog","log_type_code","date_time_scan","route_type","Movement","find","movement_id","attributes","movement","collection","destination","dataValues","movement_start","movement_end","$between","movements","include","model","MovementOptions","as","catch","err","console","log","message","resolvers","Query","parentGlobalSelect","_","args","request","user","query","database","ParentGlobal","parent","result","i","databases","schoolDB","Parent","parentData","Account","account_id","account","accountData","push","school_name","name","parentPassengers","email","Passengers","ParentPassenger","parent_id","passengerData","routeToday","Quote","required","date_out","status_re","$ne","quote","jobs","jobData","job","jobDataPickUp","jobDataDropOff","journeys","journeyData","col_passenger_log","des_passenger_log","passenger_log","time_start","datetime_start","date_start","datetime_end","isBetween","peroid","isBefore","isAfter","j_id","date_today","Tracking","order","tracking","passengers","schoolContact","Mutation","parentPasswordUpdate","mutate","msg","input","createHash","update","digest","shareDB","password","id","parentUpdate","parentPushTokenCreate","ParentToken","create","push_token","parentTokenCreate","Date","description","parseValue","value","serialize","parseLiteral","ast"],"mappings":"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","file":"resolvers.js","sourcesContent":["import { sequelizeInitial } from './connector';\r\nimport { GraphQLScalarType } from 'graphql';\r\nimport config from '../config';\r\nimport moment from 'moment';\r\nconst crypto = require('crypto');\r\nconst jwt = require('jsonwebtoken');\r\nconst checkPermission = (userPermissions, permission) => {\r\n    var check = userPermissions.filter((item) => item == permission || item == 'ALL')\r\n    if (check.length > 0) return true\r\n    else return false\r\n}\r\nvar globalDB = null\r\nconst makeJourney = async(pickUpArr, dropOffArr) => {\r\n    var response = {\r\n        collection_address: {},\r\n        destination_address: {},\r\n        extra_address: []\r\n    }\r\n    var collection_address_data = await findMovementData(pickUpArr['point_id'], ['date_start', 'time_start', 'collection_address', 'progress', 'add_lat', 'add_lng', 'movement_order'])\r\n    var destination_address_data = await findMovementData(dropOffArr['point_id'], ['date_start', 'time_start', 'destination_address', 'progress', 'des_lat', 'des_lng', 'movement_order'])\r\n    response = {\r\n        ...response,\r\n        collection_address: Object.assign({}, collection_address_data.get(), {\r\n            time_end: moment(collection_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: collection_address_data.get().collection_address,\r\n            latlng: collection_address_data.get().add_lat + ',' + collection_address_data.get().add_lng\r\n        })\r\n    }\r\n    response = {\r\n        ...response,\r\n        destination_address: Object.assign({}, destination_address_data.get(), {\r\n            time_end: moment(destination_address_data.get().tb_movement_option.get().date_end).utc().format('HH:mm'),\r\n            address: destination_address_data.get().destination_address,\r\n            latlng: destination_address_data.get().des_lat + ',' + destination_address_data.get().des_lng\r\n        })\r\n    }\r\n    var extra_address_data = await findExtraRoute(pickUpArr.quote_id,\r\n        collection_address_data.get().movement_order,\r\n        destination_address_data.get().movement_order)\r\n    response.extra_address = extra_address_data\r\n        .filter((item) => (item.get().movement_order > collection_address_data.get().movement_order))\r\n        .map((extra) => {\r\n            return {\r\n                movement_order: extra.get().movement_order,\r\n                latlng: extra.get().add_lat + ',' + extra.get().add_lng\r\n            }\r\n        })\r\n    return response\r\n}\r\n\r\nconst findPassengerLog = ({ point_id, passenger_id, quote_id, pickup }) => {\r\n    return new Promise((resolve, reject) => {\r\n        // globalDB.PassengerLog.findAll({\r\n        //         where: {\r\n        //             point_id: {\r\n        //                 $eq: point_id\r\n        //             },\r\n        //             passenger_id: {\r\n        //                 $eq: passenger_id\r\n        //             },\r\n        //             quote_id: {\r\n        //                 $eq: quote_id\r\n        //             }\r\n        //         },\r\n        //         order: [\r\n        //             ['log_id', 'DESC']\r\n        //         ],\r\n        //         limit: 1\r\n        //     })\r\n        //     .then(async(passengerLogs) => {\r\n        //         if (passengerLogs == null) resolve(null)\r\n        //         else {\r\n        //             for (let i = 0; i < passengerLogs.length; i++) {\r\n        //                 // console.log(passengerLogs[i])\r\n        //                 var movement = await globalDB.Movement.find({\r\n        //                         where: {\r\n        //                             movement_order: passengerLogs[i].get().movement_order,\r\n        //                             quote_id: quote_id\r\n        //                         },\r\n        //                         attributes: ['collection_address', 'destination_address']\r\n        //                     })\r\n        //                     // console.log(movement)\r\n        //                 passengerLogs[i].address = {\r\n        //                     collection: movement.get().collection_address,\r\n        //                     destination: movement.get().destination_address\r\n        //                 }\r\n        //             }\r\n        //             resolve(passengerLogs)\r\n        //         }\r\n        //     })\r\n        globalDB.JobPassengers.findAll({\r\n                where: {\r\n                    point_id: {\r\n                        $eq: point_id\r\n                    },\r\n                    passenger_id: {\r\n                        $eq: passenger_id\r\n                    },\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    },\r\n                    pickup: {\r\n                        $eq: pickup\r\n                    }\r\n                },\r\n                limit: 1\r\n            })\r\n            .then(async(jobPassenger) => {\r\n                // console.log(jobPassenger)\r\n\r\n                var type_code = 0\r\n                var jobPassengerItem = jobPassenger[0].get()\r\n                if (jobPassengerItem.pickup == 1) {\r\n                    if (jobPassengerItem.point_id != jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && (jobPassengerItem.status == 1 || jobPassengerItem.status == -1)) {\r\n                        type_code = 3\r\n                    } else if (jobPassengerItem.point_id == jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && jobPassengerItem.status == 1) {\r\n                        type_code = 2\r\n                    }\r\n                } else if (jobPassengerItem.pickup == 0) {\r\n                    if (jobPassengerItem.point_id != jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && jobPassengerItem.status == 1) {\r\n                        type_code = 5\r\n                    } else if (jobPassengerItem.point_id == jobPassengerItem.action_point_id && jobPassengerItem.action_point_id != 0 && jobPassengerItem.status == 1) {\r\n                        type_code = 4\r\n                    }\r\n                }\r\n\r\n                var passengerLog = {\r\n                    log_type_code: type_code,\r\n                    date_time_scan: jobPassenger[0].get().date_time_scan,\r\n                    route_type: jobPassenger[0].get().pickup,\r\n                    address: {}\r\n                }\r\n                var movement = await globalDB.Movement.find({\r\n                        where: {\r\n                            movement_id: point_id,\r\n                            quote_id: quote_id\r\n                        },\r\n                        attributes: ['collection_address', 'destination_address']\r\n                    })\r\n                    // console.log(movement)\r\n                passengerLog.address = {\r\n                    collection: movement.get().collection_address,\r\n                    destination: movement.get().destination_address\r\n                }\r\n                jobPassenger[0].dataValues = Object.assign({}, jobPassenger[0].dataValues, passengerLog)\r\n                if (type_code != 0) {\r\n                    resolve(jobPassenger)\r\n                } else {\r\n                    resolve([])\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nconst findExtraRoute = (quote_id, movement_start, movement_end) => {\r\n    return new Promise((resolve, reject) => {\r\n        globalDB.Movement.findAll({\r\n                attributes: ['movement_order', 'add_lat', 'add_lng'],\r\n                where: {\r\n                    quote_id: {\r\n                        $eq: quote_id\r\n                    },\r\n                    movement_order: {\r\n                        $between: [movement_start, movement_end]\r\n                    }\r\n                }\r\n            })\r\n            .then((movements) => {\r\n                resolve(movements)\r\n            })\r\n    })\r\n}\r\n\r\nconst findMovementData = (movement_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        // console.log(movement_id)\r\n        globalDB.Movement.find({\r\n                attributes: attributes,\r\n                include: [{\r\n                    model: globalDB.MovementOptions,\r\n                    as: 'tb_movement_option',\r\n                    attributes: ['date_end']\r\n                }],\r\n                where: {\r\n                    movement_id: {\r\n                        $eq: movement_id\r\n                    }\r\n                }\r\n            })\r\n            .then((movement) => {\r\n                resolve(movement)\r\n            })\r\n            .catch((err) => console.log(err.message))\r\n    })\r\n}\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        parentGlobalSelect(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_GLOBAL')) {\r\n                return null\r\n            }\r\n            var database = sequelizeInitial('ecm_share')\r\n            return database.ParentGlobal.find({\r\n                where: args\r\n            })\r\n        },\r\n        async parent(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: args\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                result.push({\r\n                    school_name: accountData.get().name,\r\n                    parent: parentData.get()\r\n                })\r\n                schoolDB = null\r\n            }\r\n            return result\r\n                // return Parent.find({ where: args })\r\n        },\r\n        async parentPassengers(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_PARENT_PASSENGERS')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['parent_id', 'account'],\r\n                    where: {\r\n                        email: request.user.email\r\n                    }\r\n                })\r\n                var passengerData = await schoolDB.Passengers.findAll({\r\n                    include: [{\r\n                        model: schoolDB.ParentPassenger,\r\n                        where: {\r\n                            parent_id: parentData.get().parent_id\r\n                        }\r\n                    }]\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                for (let i = 0; i < passengerData.length; i++) {\r\n                    passengerData[i].routeToday = []\r\n                    var quote = await schoolDB.Quote.find({\r\n                        attributes: ['quote_id'],\r\n                        include: [{\r\n                            attributes: [],\r\n                            model: schoolDB.JobPassengers,\r\n                            required: true\r\n                        }],\r\n                        where: {\r\n                            date_out: {\r\n                                $between: [moment().format('YYYY-MM-DD') + ' 00:00:00', moment().format('YYYY-MM-DD') + ' 23:59:59']\r\n                            },\r\n                            account: {\r\n                                $eq: accountData.get().account_id\r\n                            },\r\n                            status_re: {\r\n                                $ne: 'E'\r\n                            }\r\n                        },\r\n                    })\r\n                    if (quote == null) {\r\n                        continue;\r\n                    }\r\n                    var jobs = await schoolDB.JobPassengers.findAll({\r\n                        attributes: ['quote_id', 'point_id', 'pickup', 'passenger_id', 'j_id'],\r\n                        where: {\r\n                            quote_id: {\r\n                                $eq: quote.quote_id\r\n                            },\r\n                            passenger_id: passengerData[i].passenger_id\r\n                        }\r\n                    })\r\n                    if (jobs == null) {\r\n                        continue\r\n                    }\r\n                    globalDB = schoolDB\r\n                    var jobData = jobs.map((job) => job.get())\r\n                    var jobDataPickUp = jobData.filter((job) => job.pickup == 1)\r\n                    var jobDataDropOff = jobData.filter((job) => job.pickup == 0)\r\n                    var journeys = []\r\n                    if (jobDataPickUp.length > 0 && jobDataDropOff.length > 0) {\r\n                        for (let i = 0; i < jobDataPickUp.length; i++) {\r\n                            var journeyData = await makeJourney(jobDataPickUp[i], jobDataDropOff[i])\r\n                            var col_passenger_log = await findPassengerLog(jobDataPickUp[i])\r\n                            var des_passenger_log = await findPassengerLog(jobDataDropOff[i])\r\n                            console.log(col_passenger_log)\r\n                            console.log(des_passenger_log)\r\n                            journeyData.collection_address.passenger_log = (col_passenger_log.length > 0) ? col_passenger_log.map((item) => item.get()) : []\r\n                            journeyData.destination_address.passenger_log = (des_passenger_log) ? des_passenger_log.map((item) => item.get()) : []\r\n                            journeyData.collection_address.time_start = moment(journeyData.collection_address.time_start, 'HH:mm:ss').format('HH:mm')\r\n                            var datetime_start = moment(`${journeyData.collection_address.date_start} ${journeyData.collection_address.time_start}`, 'YYYY-MM-DD HH:mm').utc()\r\n                            var datetime_end = moment(`${journeyData.destination_address.date_start} ${journeyData.destination_address.time_end}`, 'YYYY-MM-DD HH:mm').utc()\r\n                            if (moment().isBetween(datetime_start, datetime_end)) {\r\n                                journeyData.peroid = 'current'\r\n                            } else if (moment().isBefore(datetime_start)) {\r\n                                journeyData.peroid = 'next'\r\n                            } else if (moment().isAfter(datetime_end)) {\r\n                                journeyData.peroid = 'previous'\r\n                            }\r\n                            journeyData.j_id = jobDataPickUp[i].j_id\r\n                            journeyData.date_today = moment().format('DD/MM/YYYY')\r\n                            journeyData.tracking = await schoolDB.Tracking.find({\r\n                                order: [\r\n                                    ['track_id', 'DESC']\r\n                                ],\r\n                                attributes: ['lat', 'lng', 'timestamp', 'j_id'],\r\n                                where: {\r\n                                    j_id: {\r\n                                        $eq: jobDataPickUp[i].j_id\r\n                                    }\r\n                                }\r\n                            })\r\n                            console.log(journeyData)\r\n                            passengerData[i].routeToday.push(journeyData)\r\n                        }\r\n                    }\r\n                }\r\n                result.push({\r\n                    school_name: accountData.get().name,\r\n                    passengers: passengerData\r\n                })\r\n                schoolDB = null\r\n            }\r\n            return result\r\n        },\r\n        async schoolContact(_, args, request) {\r\n            if (!checkPermission(request.user.query, 'SELECT_SCHOOL_CONTACT')) {\r\n                return null\r\n            }\r\n            var result = []\r\n            for (let i = 0; i < request.user.databases.length; i++) {\r\n                var schoolDB = sequelizeInitial(request.user.databases[i])\r\n                var parentData = await schoolDB.Parent.find({\r\n                    attributes: ['account'],\r\n                    where: {\r\n                        email: request.user.email\r\n                    }\r\n                })\r\n                var accountData = await schoolDB.Account.find({\r\n                    where: {\r\n                        account_id: parentData.get().account\r\n                    }\r\n                })\r\n                result.push(accountData.get())\r\n            }\r\n            return result\r\n        }\r\n    },\r\n    Mutation: {\r\n        async parentPasswordUpdate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'UPDATE_PASSWORD')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            args.input['password'] = crypto.createHash('md5').update(args.input['password']).digest('hex');\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentUpdate = await shareDB.ParentGlobal.update({ password: args.input['password'] }, { where: { email: args.input['email'], id: request.user.id } })\r\n                return {\r\n                    msg: \"Password has been updated\",\r\n                    status: true\r\n                }\r\n            } catch (err) {\r\n                return {\r\n                    msg: err.message,\r\n                    status: false\r\n                }\r\n            }\r\n        },\r\n        async parentPushTokenCreate(_, args, request) {\r\n            if (!checkPermission(request.user.mutate, 'CREATE_PUSH_TOKEN')) {\r\n                return {\r\n                    msg: \"Your token is operation not permit\",\r\n                    status: false\r\n                }\r\n            }\r\n            var shareDB = sequelizeInitial('ecm_share')\r\n            try {\r\n                var parentTokenCreate = await shareDB.ParentToken.create({\r\n                    push_token: args.input['push_token'],\r\n                    parent_id: request.user.id\r\n                })\r\n                return { msg: 'New token has been added', status: true }\r\n            } catch (err) {\r\n                return { msg: err.message, status: false }\r\n            }\r\n        }\r\n    },\r\n    Date: new GraphQLScalarType({\r\n        name: 'Date',\r\n        description: 'Date custom scalar type',\r\n        parseValue(value) {\r\n            return moment(value); // value from the client\r\n        },\r\n        serialize(value) {\r\n            return moment(value).utc().format('DD-MM-YYYY HH:mm:ss'); // value sent to the client\r\n        },\r\n        parseLiteral(ast) {},\r\n    })\r\n}\r\n\r\nexport default resolvers"]}