{"version":3,"sources":["../../src/data/connector.js"],"names":["sequelizeInitial","DBname","sequelize","host","dialect","pool","max","min","idle","Parent","import","ParentPassenger","Passengers","JobPassengers","Quote","Movement","MovementOptions","Journey","PassengerLog","Tracking","ParentToken","Company","Account","belongsTo","foreignKey","hasMany","hasOne","ParentGlobal","ParentDetail"],"mappings":"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","file":"connector.js","sourcesContent":["import Sequelize from 'sequelize';\r\n// var sequelize = new Sequelize('ecm_journey', 'programmer', 'Pa$$wordIT01', {\r\n//     host: '52.77.47.28',\r\n//     dialect: 'mysql',\r\n//     pool: {\r\n//         max: 5,\r\n//         min: 0,\r\n//         idle: 10000\r\n//     }\r\n// });\r\n\r\n// sequelize\r\n//     .authenticate()\r\n//     .then(() => {\r\n//         console.log('Connection has been established successfully.');\r\n//     })\r\n//     .catch(err => {\r\n//         console.error('Unable to connect to the database:', err);\r\n//     });\r\n\r\n// sequelize.sync({ force: false }).then(() => {})\r\nconst sequelizeInitial = (DBname) => {\r\n\r\n    if (DBname != 'ecm_share') {\r\n        var sequelize = new Sequelize(DBname, 'programmer', 'Pa$$wordIT01', {\r\n            host: '52.77.47.28',\r\n            dialect: 'mysql',\r\n            pool: {\r\n                max: 5,\r\n                min: 0,\r\n                idle: 10000\r\n            }\r\n        });\r\n\r\n        var Parent = sequelize.import('../models/tb_parent.js');\r\n        var ParentPassenger = sequelize.import('../models/tb_parent_passenger.js');\r\n        var Passengers = sequelize.import('../models/tb_passengers.js');\r\n        var JobPassengers = sequelize.import('../models/tb_job_passengers.js');\r\n        var Quote = sequelize.import('../models/tb_quote.js');\r\n        var Movement = sequelize.import('../models/tb_quote_movement.js');\r\n        var MovementOptions = sequelize.import('../models/tb_movement_options.js');\r\n        var Journey = sequelize.import('../models/tb_journey.js');\r\n        var PassengerLog = sequelize.import('../models/tb_passenger_log_info.js');\r\n        var Tracking = sequelize.import('../models/tb_tracking.js');\r\n        var ParentToken = sequelize.import('../models/tb_parent_token.js');\r\n        var Company = sequelize.import('../models/tb_company_data.js');\r\n        var Account = sequelize.import('../models/tb_accounts.js');\r\n\r\n        ParentPassenger.belongsTo(Passengers, { foreignKey: 'passenger_id' });\r\n        ParentPassenger.belongsTo(Parent, { foreignKey: 'parent_id' });\r\n        Parent.hasMany(ParentPassenger, { foreignKey: 'parent_id' });\r\n        Passengers.hasMany(ParentPassenger, { foreignKey: 'passenger_id' });\r\n        Passengers.hasMany(JobPassengers, { foreignKey: 'passenger_id' });\r\n        JobPassengers.belongsTo(Passengers, { foreignKey: 'passenger_id' });\r\n        Movement.hasOne(MovementOptions, { foreignKey: 'movement_id' });\r\n        MovementOptions.hasMany(Movement, { foreignKey: 'movement_id' });\r\n        JobPassengers.hasMany(Quote, { foreignKey: 'quote_id' });\r\n        Quote.hasMany(JobPassengers, { foreignKey: 'quote_id' });\r\n\r\n        JobPassengers.belongsTo(Movement, { foreignKey: 'point_id' });\r\n        Movement.hasMany(JobPassengers, { foreignKey: 'point_id' });\r\n\r\n        return {\r\n            Parent,\r\n            ParentPassenger,\r\n            Passengers,\r\n            JobPassengers,\r\n            Quote,\r\n            Movement,\r\n            Journey,\r\n            MovementOptions,\r\n            PassengerLog,\r\n            Tracking,\r\n            ParentToken,\r\n            Company,\r\n            Account\r\n        }\r\n\r\n    } else {\r\n        var sequelize = new Sequelize('ecm_share', 'programmer', 'Pa$$wordIT01', {\r\n            host: '52.77.47.28',\r\n            dialect: 'mysql',\r\n            pool: {\r\n                max: 5,\r\n                min: 0,\r\n                idle: 10000\r\n            }\r\n        });\r\n\r\n        var ParentGlobal = sequelize.import('../models/tb_parent_global.js');\r\n        var ParentDetail = sequelize.import('../models/tb_parent_detail.js');\r\n        var ParentToken = sequelize.import('../models/tb_parent_token.js');\r\n        // ParentGlobal.hasMany(ParentDetail, { foreignKey: 'parent_id' })\r\n        // ParentDetail.belongsTo(ParentGlobal)\r\n        return {\r\n            ParentGlobal,\r\n            ParentDetail,\r\n            ParentToken\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { sequelizeInitial }\r\n\r\n// const Parent = sequelize.import('../models/tb_parent.js');\r\n// const ParentPassenger = sequelize.import('../models/tb_parent_passenger.js');\r\n// const Passengers = sequelize.import('../models/tb_passengers.js');\r\n// const JobPassengers = sequelize.import('../models/tb_job_passengers.js');\r\n// const Quote = sequelize.import('../models/tb_quote.js');\r\n// const Movement = sequelize.import('../models/tb_quote_movement.js');\r\n// const MovementOptions = sequelize.import('../models/tb_movement_options.js');\r\n// const Journey = sequelize.import('../models/tb_journey.js');\r\n// const PassengerLog = sequelize.import('../models/tb_passenger_log_info.js');\r\n// const Tracking = sequelize.import('../models/tb_tracking.js');\r\n// const ParentToken = sequelize.import('../models/tb_parent_token.js');\r\n// const Company = sequelize.import('../models/tb_company_data.js');\r\n\r\n// ParentPassenger.belongsTo(Passengers, { foreignKey: 'passenger_id' });\r\n// ParentPassenger.belongsTo(Parent, { foreignKey: 'parent_id' });\r\n// Parent.hasMany(ParentPassenger, { foreignKey: 'parent_id' });\r\n// Passengers.hasMany(ParentPassenger, { foreignKey: 'passenger_id' });\r\n// Passengers.hasMany(JobPassengers, { foreignKey: 'passenger_id' });\r\n// JobPassengers.belongsTo(Passengers, { foreignKey: 'passenger_id' });\r\n// Movement.hasOne(MovementOptions, { foreignKey: 'movement_id' });\r\n// MovementOptions.hasMany(Movement, { foreignKey: 'movement_id' });\r\n// JobPassengers.hasMany(Quote, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(JobPassengers, { foreignKey: 'quote_id' });\r\n\r\n// JobPassengers.belongsTo(Movement, { foreignKey: 'point_id' });\r\n// Movement.hasMany(JobPassengers, { foreignKey: 'point_id' });\r\n// JobPassengers.belongsTo(Movement, { foreignKey: 'quote_id' });\r\n// Movement.belongsTo(JobPassengers, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(JobPassengers, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(Journey, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(Movement, { foreignKey: 'quote_id' });\r\n// Journey.belongsTo(Movement, { foreignKey: 'j_id' });\r\n// Movement.hasOne(Journey, { foreignKey: 'j_id' });\r\n// Movement.hasOne(Quote, { foreignKey: 'quote_id' });\r\n// Journey.hasOne(Quote, { foreignKey: 'quote_id' });\r\n\r\n// export {\r\n//     Parent,\r\n//     ParentPassenger,\r\n//     Passengers,\r\n//     JobPassengers,\r\n//     Quote,\r\n//     Movement,\r\n//     Journey,\r\n//     MovementOptions,\r\n//     PassengerLog,\r\n//     Tracking,\r\n//     ParentToken,\r\n//     Company\r\n// }"]}