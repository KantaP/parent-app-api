{"version":3,"sources":["../../src/data/connector.js"],"names":["sequelize","host","dialect","pool","max","min","idle","authenticate","then","console","log","catch","error","err","Parent","import","ParentPassenger","Passengers","JobPassengers","Quote","Movement","MovementOptions","Journey","PassengerLog","Tracking","ParentToken","Company","belongsTo","foreignKey","hasMany","hasOne"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAMA,YAAY,wBAAc,aAAd,EAA6B,YAA7B,EAA2C,cAA3C,EAA2D;AACzEC,UAAM,aADmE;AAEzEC,aAAS,OAFgE;AAGzEC,UAAM;AACFC,aAAK,CADH;AAEFC,aAAK,CAFH;AAGFC,cAAM;AAHJ;AAHmE,CAA3D,CAAlB;;AAUAN,UACKO,YADL,GAEKC,IAFL,CAEU,YAAM;AACRC,YAAQC,GAAR,CAAY,+CAAZ;AACH,CAJL,EAKKC,KALL,CAKW,eAAO;AACVF,YAAQG,KAAR,CAAc,oCAAd,EAAoDC,GAApD;AACH,CAPL;;AASA;;AAEA,IAAMC,SAASd,UAAUe,MAAV,CAAiB,wBAAjB,CAAf;AACA,IAAMC,kBAAkBhB,UAAUe,MAAV,CAAiB,kCAAjB,CAAxB;AACA,IAAME,aAAajB,UAAUe,MAAV,CAAiB,4BAAjB,CAAnB;AACA,IAAMG,gBAAgBlB,UAAUe,MAAV,CAAiB,gCAAjB,CAAtB;AACA,IAAMI,QAAQnB,UAAUe,MAAV,CAAiB,uBAAjB,CAAd;AACA,IAAMK,WAAWpB,UAAUe,MAAV,CAAiB,gCAAjB,CAAjB;AACA,IAAMM,kBAAkBrB,UAAUe,MAAV,CAAiB,kCAAjB,CAAxB;AACA,IAAMO,UAAUtB,UAAUe,MAAV,CAAiB,yBAAjB,CAAhB;AACA,IAAMQ,eAAevB,UAAUe,MAAV,CAAiB,oCAAjB,CAArB;AACA,IAAMS,WAAWxB,UAAUe,MAAV,CAAiB,0BAAjB,CAAjB;AACA,IAAMU,cAAczB,UAAUe,MAAV,CAAiB,8BAAjB,CAApB;AACA,IAAMW,UAAU1B,UAAUe,MAAV,CAAiB,8BAAjB,CAAhB;;AAEAC,gBAAgBW,SAAhB,CAA0BV,UAA1B,EAAsC,EAAEW,YAAY,cAAd,EAAtC;AACAZ,gBAAgBW,SAAhB,CAA0Bb,MAA1B,EAAkC,EAAEc,YAAY,WAAd,EAAlC;AACAd,OAAOe,OAAP,CAAeb,eAAf,EAAgC,EAAEY,YAAY,WAAd,EAAhC;AACAX,WAAWY,OAAX,CAAmBb,eAAnB,EAAoC,EAAEY,YAAY,cAAd,EAApC;AACAX,WAAWY,OAAX,CAAmBX,aAAnB,EAAkC,EAAEU,YAAY,cAAd,EAAlC;AACAV,cAAcS,SAAd,CAAwBV,UAAxB,EAAoC,EAAEW,YAAY,cAAd,EAApC;AACAR,SAASU,MAAT,CAAgBT,eAAhB,EAAiC,EAAEO,YAAY,aAAd,EAAjC;AACAP,gBAAgBQ,OAAhB,CAAwBT,QAAxB,EAAkC,EAAEQ,YAAY,aAAd,EAAlC;AACAV,cAAcW,OAAd,CAAsBV,KAAtB,EAA6B,EAAES,YAAY,UAAd,EAA7B;AACAT,MAAMU,OAAN,CAAcX,aAAd,EAA6B,EAAEU,YAAY,UAAd,EAA7B;;AAEAV,cAAcS,SAAd,CAAwBP,QAAxB,EAAkC,EAAEQ,YAAY,UAAd,EAAlC;AACAR,SAASS,OAAT,CAAiBX,aAAjB,EAAgC,EAAEU,YAAY,UAAd,EAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAGId,M,GAAAA,M;QACAE,e,GAAAA,e;QACAC,U,GAAAA,U;QACAC,a,GAAAA,a;QACAC,K,GAAAA,K;QACAC,Q,GAAAA,Q;QACAE,O,GAAAA,O;QACAD,e,GAAAA,e;QACAE,Y,GAAAA,Y;QACAC,Q,GAAAA,Q;QACAC,W,GAAAA,W;QACAC,O,GAAAA,O","file":"connector.js","sourcesContent":["import Sequelize from 'sequelize';\r\nconst sequelize = new Sequelize('ecm_journey', 'programmer', 'Pa$$wordIT01', {\r\n    host: '52.77.47.28',\r\n    dialect: 'mysql',\r\n    pool: {\r\n        max: 5,\r\n        min: 0,\r\n        idle: 10000\r\n    }\r\n});\r\n\r\nsequelize\r\n    .authenticate()\r\n    .then(() => {\r\n        console.log('Connection has been established successfully.');\r\n    })\r\n    .catch(err => {\r\n        console.error('Unable to connect to the database:', err);\r\n    });\r\n\r\n// sequelize.sync({ force: false }).then(() => {})\r\n\r\nconst Parent = sequelize.import('../models/tb_parent.js');\r\nconst ParentPassenger = sequelize.import('../models/tb_parent_passenger.js');\r\nconst Passengers = sequelize.import('../models/tb_passengers.js');\r\nconst JobPassengers = sequelize.import('../models/tb_job_passengers.js');\r\nconst Quote = sequelize.import('../models/tb_quote.js');\r\nconst Movement = sequelize.import('../models/tb_quote_movement.js');\r\nconst MovementOptions = sequelize.import('../models/tb_movement_options.js');\r\nconst Journey = sequelize.import('../models/tb_journey.js');\r\nconst PassengerLog = sequelize.import('../models/tb_passenger_log_info.js');\r\nconst Tracking = sequelize.import('../models/tb_tracking.js');\r\nconst ParentToken = sequelize.import('../models/tb_parent_token.js');\r\nconst Company = sequelize.import('../models/tb_company_data.js');\r\n\r\nParentPassenger.belongsTo(Passengers, { foreignKey: 'passenger_id' });\r\nParentPassenger.belongsTo(Parent, { foreignKey: 'parent_id' });\r\nParent.hasMany(ParentPassenger, { foreignKey: 'parent_id' });\r\nPassengers.hasMany(ParentPassenger, { foreignKey: 'passenger_id' });\r\nPassengers.hasMany(JobPassengers, { foreignKey: 'passenger_id' });\r\nJobPassengers.belongsTo(Passengers, { foreignKey: 'passenger_id' });\r\nMovement.hasOne(MovementOptions, { foreignKey: 'movement_id' });\r\nMovementOptions.hasMany(Movement, { foreignKey: 'movement_id' });\r\nJobPassengers.hasMany(Quote, { foreignKey: 'quote_id' });\r\nQuote.hasMany(JobPassengers, { foreignKey: 'quote_id' });\r\n\r\nJobPassengers.belongsTo(Movement, { foreignKey: 'point_id' });\r\nMovement.hasMany(JobPassengers, { foreignKey: 'point_id' });\r\n// JobPassengers.belongsTo(Movement, { foreignKey: 'quote_id' });\r\n// Movement.belongsTo(JobPassengers, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(JobPassengers, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(Journey, { foreignKey: 'quote_id' });\r\n// Quote.hasMany(Movement, { foreignKey: 'quote_id' });\r\n// Journey.belongsTo(Movement, { foreignKey: 'j_id' });\r\n// Movement.hasOne(Journey, { foreignKey: 'j_id' });\r\n// Movement.hasOne(Quote, { foreignKey: 'quote_id' });\r\n// Journey.hasOne(Quote, { foreignKey: 'quote_id' });\r\n\r\nexport {\r\n    Parent,\r\n    ParentPassenger,\r\n    Passengers,\r\n    JobPassengers,\r\n    Quote,\r\n    Movement,\r\n    Journey,\r\n    MovementOptions,\r\n    PassengerLog,\r\n    Tracking,\r\n    ParentToken,\r\n    Company\r\n}"]}